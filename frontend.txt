Directory structure:
└── frontend/
    ├── README.md
    ├── COLORS.md
    ├── components.json
    ├── eslint.config.mjs
    ├── next-env.d.ts
    ├── next.config.ts
    ├── package.json
    ├── postcss.config.mjs
    ├── tailwind.config.ts
    ├── tsconfig.json
    ├── vitest.config.ts
    ├── wagmiConfig.ts
    ├── .env.local
    ├── .env.local.example
    ├── app/
    │   ├── globals.css
    │   ├── layout.tsx
    │   ├── not-found.tsx
    │   ├── page.tsx
    │   ├── api/
    │   │   ├── portfolio/
    │   │   │   ├── route.ts
    │   │   │   └── summary/
    │   │   │       └── route.ts
    │   │   └── transactions/
    │   │       └── route.ts
    │   ├── portfolio/
    │   │   └── page.tsx
    │   └── search/
    │       ├── error.tsx
    │       ├── layout.tsx
    │       ├── loading.tsx
    │       └── page.tsx
    ├── components/
    │   ├── ColorExample.tsx
    │   ├── account.tsx
    │   ├── connect-wallet.tsx
    │   ├── header.tsx
    │   ├── investment-modal.tsx
    │   ├── portfolio-client.tsx
    │   ├── position-card.tsx
    │   ├── search-bar.tsx
    │   ├── search-results.tsx
    │   ├── sync-badge.tsx
    │   ├── wallet-options.tsx
    │   ├── yield-card.tsx
    │   ├── yield-results.tsx
    │   └── ui/
    │       ├── badge.tsx
    │       ├── button.tsx
    │       ├── card.tsx
    │       ├── dialog.tsx
    │       ├── input.tsx
    │       ├── label.tsx
    │       ├── slider.tsx
    │       ├── toast.tsx
    │       ├── toaster.tsx
    │       └── tooltip.tsx
    ├── hooks/
    │   └── use-toast.tsx
    ├── integrations/
    │   └── supabase/
    │       ├── client.ts
    │       └── types.ts
    ├── lib/
    │   ├── chains-map.ts
    │   ├── langgraph-client.ts
    │   ├── mock-data.ts
    │   ├── portfolio-types.ts
    │   ├── portfolio-utils.ts
    │   ├── prisma.ts
    │   ├── search-service-supabase.ts
    │   ├── search-service.ts
    │   ├── types.ts
    │   └── utils.ts
    ├── providers/
    │   └── providers.tsx
    ├── public/
    └── tests/
        ├── api-transactions.test.ts
        └── portfolio-fetch.test.ts

================================================
File: README.md
================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

## Scripts

- `pnpm dev`  - run the development server
- `pnpm test` - execute unit tests with Vitest



================================================
File: COLORS.md
================================================
# OhMyYield Color System Guide

This guide explains how to use the color variables defined in our Tailwind CSS configuration.

## Color Palette

We've defined the following color variables for use throughout the application:

| Variable Name | Hex Value | Description |
|---------------|-----------|-------------|
| `navy`        | `#1A1E36` | Dark blue used for text, borders, and UI elements |
| `orange`      | `#FF7A00` | Primary orange used for backgrounds, buttons, and highlights |
| `cream`       | `#F2EFE1` | Off-white used for card backgrounds and secondary areas |
| `blue`        | `#6B9BFF` | Light blue used for buttons, badges, and highlights |
| `yellow`      | `#FFD23F` | Yellow used for highlights, badges, and UI elements |

## How to Use

### Before (using hardcoded hex values):

```jsx
<div className="bg-[#6B9BFF] text-[#1A1E36] border-2 border-[#1A1E36]">
  Content
</div>
```

### After (using color variables):

```jsx
<div className="bg-blue text-navy border-2 border-navy">
  Content
</div>
```

## Opacity Variants

You can also use opacity variants with these colors:

```jsx
<div className="bg-orange/90">90% opacity orange background</div>
<div className="text-navy/70">70% opacity navy text</div>
```

## Benefits of Using Color Variables

1. **Consistency**: Ensures consistent colors throughout the application
2. **Maintainability**: Makes it easier to update colors in one place
3. **Readability**: More semantic and readable class names
4. **Conciseness**: Shorter class names than hardcoded hex values

## Examples

### Buttons

```jsx
// Primary Button
<Button className="bg-orange hover:bg-orange/90 text-navy border-2 border-navy font-bold retro-shadow">
  Primary Button
</Button>

// Secondary Button
<Button className="bg-blue hover:bg-blue/90 text-navy border-2 border-navy font-bold retro-shadow">
  Secondary Button
</Button>

// Tertiary Button
<Button className="bg-cream hover:bg-cream/90 text-navy border-2 border-navy font-bold retro-shadow">
  Tertiary Button
</Button>
```

### Cards

```jsx
<div className="bg-cream rounded-xl border-2 border-navy p-6 retro-shadow">
  <h3 className="font-bold text-navy">Card Title</h3>
  <p className="text-navy/70">Card content with lower opacity text</p>
</div>
```

### Backgrounds

```jsx
<div className="bg-orange min-h-screen">
  <div className="container mx-auto py-8">
    <div className="bg-cream rounded-xl border-2 border-navy p-8 retro-shadow">
      Content
    </div>
  </div>
</div>
```

## Migration

When updating existing components, replace hex color codes with the corresponding color variables:

- `[#1A1E36]` → `navy`
- `[#FF7A00]` → `orange`
- `[#F2EFE1]` → `cream`
- `[#6B9BFF]` → `blue`
- `[#FFD23F]` → `yellow`

For opacity variants, replace `[#1A1E36]/60` with `navy/60`, etc. 


================================================
File: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
File: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



================================================
File: next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
File: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;



================================================
File: package.json
================================================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "vitest run"
  },
  "dependencies": {
    "@langchain/langgraph-sdk": "^0.0.11",
    "@omy/database": "workspace:*",
    "@prisma/client": "^5.22.0",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.14",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@stakekit/api-hooks": "^0.0.103",
    "@supabase/supabase-js": "^2.49.8",
    "@tanstack/react-query": "^5.69.0",
    "@wagmi/connectors": "^5.7.11",
    "@wagmi/core": "^2.16.7",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.483.0",
    "next": "15.1.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "sonner": "^2.0.4",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "viem": "~2.23.14",
    "wagmi": "^2.14.15",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20.19.6",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.0",
    "postcss": "^8",
    "prisma": "^5.22.0",
    "tailwindcss": "^3.4.17",
    "typescript": "^5",
    "vitest": "^1.6.1"
  }
}



================================================
File: postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
        perplexity: {
          purple: "#8B5CF6",
          lightPurple: "#E5DEFF",
          border: "#E2E8F0",
          background: "#FFFFFF",
          text: "#1A202C",
        },
        cream: {
          100: "#FEF8F0",
          200: "#F9EFE1",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
        "pulse-subtle": {
          "0%, 100%": { opacity: "1" },
          "50%": { opacity: "0.7" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "pulse-subtle": "pulse-subtle 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;



================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "types": ["vitest/globals", "node"],
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: vitest.config.ts
================================================
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    environment: 'jsdom',
    globals: true,
    include: ['tests/**/*.test.ts']
  }
});



================================================
File: wagmiConfig.ts
================================================
import { http, createConfig } from "@wagmi/core";
import { createStorage, cookieStorage } from "wagmi";
import {
  base,
  mainnet,
  optimism,
  arbitrum,
  polygon,
  sepolia,
} from "@wagmi/core/chains";
import { injected } from "@wagmi/connectors";

export function getConfig() {
  return createConfig({
    chains: [mainnet, base, optimism, arbitrum, polygon, sepolia],
    connectors: [injected()],
    ssr: true,
    storage: createStorage({
      storage: cookieStorage,
    }),
    transports: {
      [mainnet.id]: http(),
      [base.id]: http(),
      [optimism.id]: http(),
      [arbitrum.id]: http(),
      [polygon.id]: http(),
      [sepolia.id]: http(),
    },
  });
}



================================================
File: .env.local
================================================
NEXT_PUBLIC_SUPABASE_API_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1ucWh0amt0dmdlZWZ6a2t4Y3ZtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk2MzM1MDUsImV4cCI6MjA1NTIwOTUwNX0.fm0pj_2ch1Twq7oIc97XnnMtX8zevkscDJq7ZjTcIlg"
NEXT_PUBLIC_SUPABASE_URL="https://mnqhtjktvgeefzkkxcvm.supabase.co"
SUPABASE_SERVICE_ROLE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1ucWh0amt0dmdlZWZ6a2t4Y3ZtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczOTYzMzUwNSwiZXhwIjoyMDU1MjA5NTA1fQ.7BYqbqcUqHgZL5BKvdgKIkLRyBUABKiPOTJJSQJJ_7g"
NEXT_PUBLIC_STAKEKIT_API_BASE_URL="https://api.stakek.it"
NEXT_PUBLIC_STAKEKIT_API_KEY="33bea379-2557-4368-9d3d-09e0b47d6a68"

DATABASE_URL="postgresql://prisma.mnqhtjktvgeefzkkxcvm:YX7Sbvukyt8WJS27ajb@aws-0-eu-central-1.pooler.supabase.com/postgres?pgbouncer=true"
DIRECT_URL="postgresql://prisma.mnqhtjktvgeefzkkxcvm:YX7Sbvukyt8WJS27ajb@aws-0-eu-central-1.pooler.supabase.com:5432/postgres"


================================================
File: .env.local.example
================================================
DATABASE_URL=



================================================
File: app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
    :root {
        --background: 0 0% 100%;
        --foreground: 222.2 84% 4.9%;

        --card: 0 0% 100%;
        --card-foreground: 222.2 84% 4.9%;

        --popover: 0 0% 100%;
        --popover-foreground: 222.2 84% 4.9%;

        --primary: 222.2 47.4% 11.2%;
        --primary-foreground: 210 40% 98%;

        --secondary: 210 40% 96.1%;
        --secondary-foreground: 222.2 47.4% 11.2%;

        --muted: 210 40% 96.1%;
        --muted-foreground: 215.4 16.3% 46.9%;

        --accent: 210 40% 96.1%;
        --accent-foreground: 222.2 47.4% 11.2%;

        --destructive: 0 84.2% 60.2%;
        --destructive-foreground: 210 40% 98%;

        --border: 214.3 31.8% 91.4%;
        --input: 214.3 31.8% 91.4%;
        --ring: 222.2 84% 4.9%;

        --radius: 0.5rem;

        --sidebar-background: 0 0% 98%;

        --sidebar-foreground: 240 5.3% 26.1%;

        --sidebar-primary: 240 5.9% 10%;

        --sidebar-primary-foreground: 0 0% 98%;

        --sidebar-accent: 240 4.8% 95.9%;

        --sidebar-accent-foreground: 240 5.9% 10%;

        --sidebar-border: 220 13% 91%;

        --sidebar-ring: 217.2 91.2% 59.8%;
    }

    .dark {
        --background: 222.2 84% 4.9%;
        --foreground: 210 40% 98%;

        --card: 222.2 84% 4.9%;
        --card-foreground: 210 40% 98%;

        --popover: 222.2 84% 4.9%;
        --popover-foreground: 210 40% 98%;

        --primary: 210 40% 98%;
        --primary-foreground: 222.2 47.4% 11.2%;

        --secondary: 217.2 32.6% 17.5%;
        --secondary-foreground: 210 40% 98%;

        --muted: 217.2 32.6% 17.5%;
        --muted-foreground: 215 20.2% 65.1%;

        --accent: 217.2 32.6% 17.5%;
        --accent-foreground: 210 40% 98%;

        --destructive: 0 62.8% 30.6%;
        --destructive-foreground: 210 40% 98%;

        --border: 217.2 32.6% 17.5%;
        --input: 217.2 32.6% 17.5%;
        --ring: 212.7 26.8% 83.9%;
        --sidebar-background: 240 5.9% 10%;
        --sidebar-foreground: 240 4.8% 95.9%;
        --sidebar-primary: 224.3 76.3% 48%;
        --sidebar-primary-foreground: 0 0% 100%;
        --sidebar-accent: 240 3.7% 15.9%;
        --sidebar-accent-foreground: 240 4.8% 95.9%;
        --sidebar-border: 240 3.7% 15.9%;
        --sidebar-ring: 217.2 91.2% 59.8%;
    }
}

@layer base {
    * {
        @apply border-border;
    }

    body {
        @apply bg-background text-foreground;
    }
}



================================================
File: app/layout.tsx
================================================
import type { Metadata } from "next";
import { headers } from "next/headers";
import { cookieToInitialState } from "wagmi";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Header } from "@/components/header";
import { Providers } from "@/providers/providers";
import { getConfig } from "../wagmiConfig";
import { Toaster } from "@/components/ui/toaster";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "OhMyYield - Juice Your Yields!",
  description: "Find the best yields for your crypto assets",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const config = getConfig();
  const headersList = await headers();
  const initialState = cookieToInitialState(config, headersList.get("cookie"));

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <div className="min-h-screen bg-orange-500 flex flex-col">
          <Providers initialState={initialState}>
            <Header />
            <main className="container mx-auto flex-1 py-6">{children}</main>
            <Toaster />
          </Providers>
        </div>
      </body>
    </html>
  );
}



================================================
File: app/not-found.tsx
================================================
import Link from "next/link";

export default function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <Link href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </Link>
      </div>
    </div>
  );
}



================================================
File: app/page.tsx
================================================
"use client";
import Link from "next/link";
import SearchBar from "@/components/search-bar";
import { Button } from "@/components/ui/button";
import { ArrowRight } from "lucide-react";

const exampleQueries = [
  "Show me top 5 yields for ETH on ethereum",
  "Show me top 10 yields on stablecoins",
];

function ExampleQueries() {
  return exampleQueries.map((example, index) => (
    <Link key={index} href={`/search?q=${encodeURIComponent(example)}`}>
      <Button
        className={
          index === 0
            ? "bg-blue-500 hover:bg-blue-600 text-white"
            : "bg-orange-500 hover:bg-orange-600 text-white"
        }
        variant="outline"
      >
        {example} <ArrowRight className="ml-2 h-4 w-4" />
      </Button>
    </Link>
  ));
}


export default function Home() {
  return (
    <div className="w-full max-w-4xl mx-auto bg-cream-100 rounded-xl p-8 border-2 border-gray-900 shadow-md">
      <h1 className="text-5xl font-bold text-center text-gray-900 mb-12">
        JUICE YOUR YIELDS!
      </h1>

      <SearchBar />

      <div className="mt-8 flex flex-col items-center">
        <p className="text-navy mb-2">Try these examples:</p>
        <div className="flex flex-wrap gap-2 justify-center">
          <ExampleQueries />
        </div>
      </div>
    </div>
  );
}



================================================
File: app/api/portfolio/route.ts
================================================
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export const runtime = 'nodejs';

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const wallet = searchParams.get('wallet');
  if (!wallet) {
    return NextResponse.json({ error: 'wallet is required' }, { status: 400 });
  }

  const positions = await prisma.portfolioPosition.findMany({
    where: { walletAddress: wallet, isActive: true },
    include: { yieldOpportunity: { select: { apy: true, tvl: true } } }
  });

  const result = positions.map(p => ({
    integrationId: p.integrationId,
    amount: p.amount,
    usdValue: (p as any).usdValue ?? null,
    apy: p.yieldOpportunity.apy,
    tvl: p.yieldOpportunity.tvl,
    entryDate: p.entryDate,
    lastBalanceSync: p.lastBalanceSync
  }));

  return NextResponse.json(result);
}



================================================
File: app/api/portfolio/summary/route.ts
================================================
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { Decimal } from '@prisma/client/runtime/library';

export const runtime = 'nodejs';

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const wallet = searchParams.get('wallet');
  if (!wallet) {
    return NextResponse.json({ error: 'wallet is required' }, { status: 400 });
  }

  const positions = await prisma.portfolioPosition.findMany({
    where: { walletAddress: wallet, isActive: true },
    include: { yieldOpportunity: { select: { apy: true } } }
  });

  let totalUsd = new Decimal(0);
  let weightedApy = new Decimal(0);
  let totalAmount = new Decimal(0);

  for (const p of positions) {
    const amount = new Decimal(p.amount);
    const usdVal = new Decimal((p as any).usdValue ?? 0);
    if (!(p as any).usdValue === null) {
      totalUsd = totalUsd.plus(usdVal);
    }
    weightedApy = weightedApy.plus(amount.times(p.yieldOpportunity.apy));
    totalAmount = totalAmount.plus(amount);
  }

  const avgApy = totalAmount.eq(0)
    ? 0
    : weightedApy.div(totalAmount).toNumber();

  return NextResponse.json({ totalUsd: totalUsd.toNumber(), avgApy });
}



================================================
File: app/api/transactions/route.ts
================================================
import { NextResponse } from 'next/server';
import { z } from 'zod';
import { prisma } from '@/lib/prisma';
import { Decimal } from '@prisma/client/runtime/library';
import { randomUUID } from 'crypto';

export const runtime = 'nodejs';

const BodySchema = z.object({
  walletAddress: z.string(),
  integrationId: z.string(),
  yieldOpportunityId: z.string(),
  direction: z.enum(['ENTER', 'EXIT', 'CORRECTION']),
  amount: z.union([z.string(), z.number()]),
  txHash: z.string(),
  executedAt: z.string()
});

export async function POST(request: Request) {
  const json = await request.json();
  const parsed = BodySchema.safeParse(json);
  if (!parsed.success) {
    return NextResponse.json({ error: parsed.error.format() }, { status: 422 });
  }

  const data = parsed.data;
  const amount = new Decimal(data.amount);

  await prisma.portfolioTransaction.create({
    data: {
      walletAddress: data.walletAddress,
      integrationId: data.integrationId,
      yieldOpportunityId: data.yieldOpportunityId,
      direction: data.direction,
      amount,
      usdValue: null,
      txHash: data.txHash,
      executedAt: new Date(data.executedAt)
    }
  });

  const now = new Date();
  const existing = await prisma.portfolioPosition.findUnique({
    where: {
      walletAddress_integrationId: {
        walletAddress: data.walletAddress,
        integrationId: data.integrationId
      }
    }
  });

  if (!existing) {
    const opp = await prisma.yieldOpportunity.findUnique({
      where: { id: data.yieldOpportunityId },
      select: { tokenSymbol: true, apy: true }
    });
    await prisma.portfolioPosition.create({
      data: {
        id: randomUUID(),
        walletAddress: data.walletAddress,
        integrationId: data.integrationId,
        yieldOpportunityId: data.yieldOpportunityId,
        amount: amount.toNumber(),
        entryDate: new Date(data.executedAt),
        lastBalanceSync: now,
        currentApy: opp?.apy ?? 0,
        isActive: data.direction !== 'EXIT',
        entryTxHash: data.txHash,
        tokenSymbol: opp?.tokenSymbol ?? ''
      }
    });
  } else {
    let newAmount = new Decimal(existing.amount);
    let isActive = existing.isActive;
    if (data.direction === 'ENTER') {
      newAmount = newAmount.plus(amount);
      isActive = true;
    } else if (data.direction === 'EXIT') {
      newAmount = newAmount.minus(amount);
      if (newAmount.lte(new Decimal('1e-18'))) {
        isActive = false;
      }
    } else if (data.direction === 'CORRECTION') {
      newAmount = amount;
    }

    await prisma.portfolioPosition.update({
      where: {
        walletAddress_integrationId: {
          walletAddress: data.walletAddress,
          integrationId: data.integrationId
        }
      },
      data: {
        amount: newAmount.toNumber(),
        isActive,
        lastBalanceSync: now
      }
    });
  }

  return NextResponse.json({ success: true }, { status: 201 });
}



================================================
File: app/portfolio/page.tsx
================================================
import { headers } from 'next/headers'
import { notFound } from 'next/navigation'
import { cookieToInitialState } from 'wagmi'
import { getAccount } from '@wagmi/core/actions'
import { getConfig } from '../../wagmiConfig'
import PortfolioClient from '@/components/portfolio-client'

export const runtime = 'edge'

export default async function PortfolioPage() {
  if (process.env.NEXT_PUBLIC_FEATURE_PORTFOLIO_V1 !== 'on') {
    notFound()
  }

  const config = getConfig()
  const headerList = headers()
  const initialState = cookieToInitialState(config, headerList.get('cookie'))
  const { address } = getAccount(config, { state: initialState })

  if (!address) {
    notFound()
  }

  const res = await fetch(`/api/portfolio?wallet=${address}`, {
    next: { revalidate: 30 }
  })
  if (!res.ok) {
    notFound()
  }
  const data = await res.json()

  return <PortfolioClient positions={data} />
}



================================================
File: app/search/error.tsx
================================================
"use client";

import { Button } from "@/components/ui/button";
import { useEffect } from "react";

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error);
  }, [error]);

  return (
    <>
      <h2 className="text-2xl font-black text-navy mb-4">
        Something went wrong!
      </h2>
      <p className="text-navy/70 mb-6">
        Sorry, we couldn&apos;t load the search results.
      </p>
      <Button
        onClick={reset}
        className="bg-orange hover:bg-orange/90 text-navy border-2 border-navy font-bold retro-shadow"
      >
        Try again
      </Button>
    </>
  );
}



================================================
File: app/search/layout.tsx
================================================
"use client";
import { Button } from "@/components/ui/button";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";

export default function SearchLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <div className="w-full max-w-4xl mx-auto bg-cream-100 rounded-xl p-8 border-2 border-gray-900 shadow-md">
      <div className="space-y-6">
        <div className="flex items-center">
          <Link href="/">
            <Button variant="ghost" className="flex items-center text-gray-700">
              <ArrowLeft className="mr-2 h-4 w-4" /> Back to Home
            </Button>
          </Link>
        </div>
        {children}
      </div>
    </div>
  );
}



================================================
File: app/search/loading.tsx
================================================
export default function Loading() {
  return (
    <div className="flex items-center justify-center py-8">
      <div className="animate-spin h-8 w-8 border-4 border-orange border-t-transparent rounded-full"></div>
      <span className="ml-3 text-navy font-medium">Loading results...</span>
    </div>
  );
}



================================================
File: app/search/page.tsx
================================================
import { YieldResults } from "@/components/yield-results";
import { getSearchResults } from "@/lib/search-service-supabase";

// Force dynamic rendering to ensure searchParams are available
export const dynamic = "force-dynamic";

export default async function SearchPage({
  searchParams,
}: {
  searchParams: Promise<{ q?: string }>;
}) {
  // Use await to access searchParams properties
  const searchParamsData = await searchParams;
  const query =
    typeof searchParamsData.q === "string" ? searchParamsData.q : "";

  // Fetch results directly without caching
  const results = await getSearchResults(query);

  return <YieldResults query={query} results={results} />;
}



================================================
File: components/ColorExample.tsx
================================================
"use client"

import { Button } from "@/components/ui/button"

/**
 * Example component demonstrating the use of Tailwind color variables
 * instead of hardcoded hex values.
 * 
 * BEFORE:
 * className="bg-[#6B9BFF] text-[#1A1E36] border-2 border-[#1A1E36]"
 * 
 * AFTER:
 * className="bg-blue text-navy border-2 border-navy"
 */
export function ColorExample() {
  return (
    <div className="p-8">
      <h2 className="text-2xl font-black text-navy mb-6">Color System Example</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div className="bg-cream rounded-xl border-2 border-navy p-6 retro-shadow">
          <h3 className="font-bold text-navy mb-4">Primary Button</h3>
          <Button className="bg-orange hover:bg-orange/90 text-navy border-2 border-navy font-bold retro-shadow">
            Orange Button
          </Button>
        </div>
        
        <div className="bg-cream rounded-xl border-2 border-navy p-6 retro-shadow">
          <h3 className="font-bold text-navy mb-4">Secondary Button</h3>
          <Button className="bg-blue hover:bg-blue/90 text-navy border-2 border-navy font-bold retro-shadow">
            Blue Button
          </Button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-orange rounded-xl border-2 border-navy p-6 retro-shadow">
          <p className="text-navy font-bold">Orange Background</p>
        </div>
        
        <div className="bg-yellow rounded-xl border-2 border-navy p-6 retro-shadow">
          <p className="text-navy font-bold">Yellow Background</p>
        </div>
        
        <div className="bg-blue rounded-xl border-2 border-navy p-6 retro-shadow">
          <p className="text-navy font-bold">Blue Background</p>
        </div>
      </div>
    </div>
  )
} 


================================================
File: components/account.tsx
================================================
import { useAccount, useDisconnect } from "wagmi";
import { Button } from "@/components/ui/button";
import { useCallback } from "react";

export function Account() {
  const { address } = useAccount();
  const { disconnect } = useDisconnect();

  const formatAddress = (addr: string) => {
    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;
  };

  const handleDisconnect = useCallback(() => {
    disconnect();
  }, [disconnect]);

  return (
    <div className="flex items-center gap-4">
      {address && (
        <div className="rounded-lg bg-white px-3 py-2 text-sm font-medium text-gray-900">
          {formatAddress(address)}
        </div>
      )}
      <Button
        className="bg-white text-gray-900 hover:bg-gray-100 font-semibold border border-gray-900 shadow-md"
        size="sm"
        onClick={handleDisconnect}
      >
        Disconnect
      </Button>
    </div>
  );
}



================================================
File: components/connect-wallet.tsx
================================================
'use client'

import { Account } from './account'
import { WalletOptions } from './wallet-options'
import { useAccount } from 'wagmi'

export default function ConnectWallet() {
  const { isConnected } = useAccount()
  if (isConnected) return <Account />
  return <WalletOptions />
}


================================================
File: components/header.tsx
================================================
"use client";

import Link from "next/link";
import ConnectWallet from "@/components/connect-wallet";
import { useAccount } from "wagmi";

export function Header() {
  const { isConnected } = useAccount();
  const showPortfolio =
    process.env.NEXT_PUBLIC_FEATURE_PORTFOLIO_V1 === "on" && isConnected;

  return (
    <header className="container mx-auto py-4">
      <div className="flex items-center justify-between">
        <Link href="/">
          <span className="text-2xl font-bold text-gray-900 uppercase">
            OhMyYield
          </span>
        </Link>
        <div className="flex items-center gap-4">
          {showPortfolio && (
            <Link href="/portfolio" className="font-semibold text-navy">
              Portfolio
            </Link>
          )}
          <ConnectWallet />
        </div>
      </div>
    </header>
  );
}



================================================
File: components/investment-modal.tsx
================================================
"use client";

import type React from "react";
import { useState, useCallback, useMemo } from "react";
import { ArrowRightIcon, LoaderIcon } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { useQueryClient } from "@tanstack/react-query";
import { addOrUpdatePosition } from "@/lib/portfolio-utils";
import type { PortfolioPosition } from "@/lib/portfolio-types";

const getChainColor = (chain: string) => {
  switch (chain.toLowerCase()) {
    case "ethereum":
      return "bg-blue/20 text-navy border-blue";
    case "polygon":
      return "bg-orange/20 text-navy border-orange";
    case "avalanche":
      return "bg-orange/20 text-navy border-orange";
    case "solana":
      return "bg-blue/20 text-navy border-blue";
    case "arbitrum":
      return "bg-blue/20 text-navy border-blue";
    case "optimism":
      return "bg-orange/20 text-navy border-orange";
    case "base":
      return "bg-blue/20 text-navy border-blue";
    default:
      return "bg-navy/10 text-navy border-navy";
  }
};

import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { useToast } from "@/hooks/use-toast";
import { formatPercentage } from "@/lib/utils";
import type { YieldResult } from "@/lib/types";
import chainsMap from "@/lib/chains-map";
import {
  useAccount,
  useSendTransaction,
  usePublicClient,
  useSwitchChain,
  useChainId,
} from "wagmi";

// Import the direct function calls instead of hooks
import {
  actionEnter,
  transactionConstruct,
  useTokenGetTokenBalances,
  Networks,
} from "@stakekit/api-hooks";

// Types for transaction handling
interface TransactionResponse {
  to: string;
  data: string;
  value?: string;
  chainId: number;
}

interface TransactionStatus {
  hash: `0x${string}`;
  confirmed: boolean;
}

interface InvestmentModalProps {
  isOpen: boolean;
  handleClose: () => void;
  yieldOption: YieldResult;
}

export function InvestmentModal({
  isOpen,
  handleClose,
  yieldOption,
}: InvestmentModalProps) {
  const { isConnected, address } = useAccount();
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [amount, setAmount] = useState("");
  const [percentage, setPercentage] = useState(50);
  const [isInvesting, setIsInvesting] = useState(false);
  const [currentTxIndex, setCurrentTxIndex] = useState(0);
  const [totalTxCount, setTotalTxCount] = useState(0);
  const [progressMessage, setProgressMessage] = useState("");
  const [transactions, setTransactions] = useState<TransactionStatus[]>([]);
  const [isSwitchingChain, setIsSwitchingChain] = useState(false);

  const { switchChain } = useSwitchChain();
  const currentChainId = useChainId();

  // Get the transaction sender hook and public client for blockchain interactions
  const { sendTransactionAsync } = useSendTransaction();
  const publicClient = usePublicClient();

  // Memoize the balance request configuration
  const balanceRequest = useMemo(
    () => ({
      addresses: address
        ? [
            {
              address: address,
              network: Networks[yieldOption.token_network],
              tokenAddress: yieldOption.token_address || undefined,
            },
          ]
        : [],
    }),
    [address, yieldOption.token_network, yieldOption.token_address],
  );

  // Fetch token balance using StakeKit with memoized dependencies
  const balanceQuery = useTokenGetTokenBalances(balanceRequest, {
    query: {
      enabled: !!address && isOpen,
      refetchOnWindowFocus: false,
      staleTime: 30000, // 30 seconds
      // Only refetch when important dependencies change
      refetchOnMount: false,
    },
  });

  // Calculate derived values from transactions
  const confirmedCount = transactions.filter((tx) => tx.confirmed).length;
  const totalTxs = transactions.length;

  // Get required chain ID for this yield option
  const requiredChainId = chainsMap[yieldOption.token_network];
  const needsChainSwitch = currentChainId !== requiredChainId;

  // Get balance from StakeKit API
  const tokenBalance = balanceQuery.data?.find(
    (balance) => balance.token.symbol === yieldOption.token_symbol,
  );
  const maxAmount = tokenBalance ? parseFloat(tokenBalance.amount) : 0;

  const handlePercentageChange = (value: number[]) => {
    const newPercentage = value[0];
    setPercentage(newPercentage);
    setAmount(((maxAmount * newPercentage) / 100).toString());
  };

  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    if (value === "") {
      setAmount("");
      setPercentage(0);
      return;
    }

    const numValue = Number.parseFloat(value);
    if (isNaN(numValue) || numValue < 0) return;

    const newAmount = Math.min(numValue, maxAmount);
    setAmount(newAmount.toString());
    setPercentage((newAmount / maxAmount) * 100);
  };

  const handleMaxClick = () => {
    setAmount(maxAmount.toString());
    setPercentage(100);
  };

  // Helper function to wait for transaction confirmation and update state
  const waitForTransaction = useCallback(
    async (hash: `0x${string}`) => {
      try {
        if (!publicClient) {
          throw new Error("Public client not initialized");
        }

        // Wait for the transaction to be mined and confirmed
        const receipt = await publicClient.waitForTransactionReceipt({
          hash,
          confirmations: 1,
          timeout: 5 * 60 * 1000, // 5 minutes timeout
        });

        // Update transaction status in state
        setTransactions((prev) =>
          prev.map((tx) =>
            tx.hash === hash ? { ...tx, confirmed: true } : tx,
          ),
        );

        return {
          status: receipt.status === "success" ? "success" : "failed",
        };
      } catch (error) {
        throw new Error(
          `Transaction confirmation failed: ${error instanceof Error ? error.message : String(error)}`,
        );
      }
    },
    [publicClient],
  );

  // Process transactions sequentially with status tracking
  const processTransactions = useCallback(
    async (
      txs: Array<{ id: string }>,
      meta: { wallet: string; integrationId: string; yieldOpportunityId: string; amount: number }
    ): Promise<string[]> => {
      const hashes: string[] = [];
      setTotalTxCount(txs.length);
      setTransactions([]);

      for (let i = 0; i < txs.length; i++) {
        try {
          setCurrentTxIndex(i);
          setProgressMessage(
            `Processing transaction ${i + 1}/${txs.length}...`,
          );

          // 1. Construct the transaction
          const txId = txs[i].id;
          setProgressMessage(
            `Constructing transaction ${i + 1}/${txs.length}...`,
          );
          const txData = await transactionConstruct(txId, {});

          if (!txData?.unsignedTransaction) {
            throw new Error(
              `Failed to construct transaction ${i + 1}/${txs.length}`,
            );
          }

          // 2. Parse the transaction data
          const transaction = JSON.parse(
            txData.unsignedTransaction,
          ) as TransactionResponse;

          // 3. Prepare and send the transaction
          setProgressMessage(`Sending transaction ${i + 1}/${txs.length}...`);

          const txParams = {
            to: transaction.to as `0x${string}`,
            data: transaction.data as `0x${string}`,
            value: transaction.value ? BigInt(transaction.value) : undefined,
            chainId: transaction.chainId,
          };

          const hash = await sendTransactionAsync(txParams);
          hashes.push(hash);

          // Track transaction status
          setTransactions((prev) => [...prev, { hash, confirmed: false }]);

          // Update UI with transaction sent status
          setProgressMessage(
            `Transaction ${i + 1}/${txs.length} sent, waiting for confirmation...`,
          );
          toast({
            title: `Transaction sent`,
            description: `Transaction ${i + 1}/${txs.length} is being processed`,
          });

          // 4. Wait for confirmation
          try {
            const result = await waitForTransaction(hash);

            if (result.status === "success") {
              setProgressMessage(
                `Transaction ${i + 1}/${txs.length} confirmed!`,
              );
              toast({
                title: `Transaction confirmed`,
                description: `Transaction ${i + 1}/${txs.length} has been confirmed`,
              });

              await fetch('/api/transactions', {
                method: 'POST',
                body: JSON.stringify({
                  walletAddress: meta.wallet,
                  integrationId: meta.integrationId,
                  yieldOpportunityId: meta.yieldOpportunityId,
                  direction: 'ENTER',
                  amount: meta.amount,
                  txHash: hash,
                  executedAt: new Date().toISOString()
                })
              })

              queryClient.setQueryData(['portfolio', meta.wallet], (old: any) =>
                addOrUpdatePosition(old as PortfolioPosition[], {
                  wallet_address: meta.wallet,
                  integration_id: meta.integrationId,
                  yield_opportunity_id: meta.yieldOpportunityId,
                  amount: meta.amount,
                  usd_value: null,
                  entry_date: new Date().toISOString(),
                  apy: 0,
                  last_balance_sync: new Date().toISOString()
                })
              )
            } else {
              throw new Error(
                `Transaction failed with status: ${result.status}`,
              );
            }
          } catch (confirmError) {
            throw new Error(
              `Failed to confirm transaction: ${confirmError instanceof Error ? confirmError.message : String(confirmError)}`,
            );
          }
        } catch (error) {
          toast({
            title: `Transaction failed`,
            description:
              error instanceof Error
                ? error.message
                : "The transaction was rejected",
            variant: "destructive",
          });

          // If any transaction fails, stop the process
          setIsInvesting(false);
          return [];
        }
      }

      // All transactions completed successfully
      setIsInvesting(false);
      return hashes;
    },
    [sendTransactionAsync, toast, waitForTransaction, queryClient],
  );

  // Handle chain switching
  const handleSwitchChain = useCallback(async () => {
    if (!requiredChainId) {
      toast({
        title: "Unsupported network",
        description: `Network ${yieldOption.token_network} is not supported`,
        variant: "destructive",
      });
      return;
    }

    setIsSwitchingChain(true);
    try {
      switchChain({ chainId: requiredChainId });
      toast({
        title: "Chain switched",
        description: `Successfully switched to ${yieldOption.token_network}`,
      });
    } catch (error) {
      toast({
        title: "Chain switch failed",
        description:
          error instanceof Error ? error.message : "Failed to switch chain",
        variant: "destructive",
      });
    } finally {
      setIsSwitchingChain(false);
    }
  }, [requiredChainId, switchChain, toast, yieldOption.token_network]);

  // Handle the main investment flow
  const handleInvest = useCallback(async () => {
    // Validate wallet connection
    if (!isConnected || !address) {
      toast({
        title: "Wallet not connected",
        description: "Please connect your wallet to invest",
        variant: "destructive",
      });
      return;
    }

    // Validate investment amount
    const investAmount = Number.parseFloat(amount);
    if (isNaN(investAmount) || investAmount <= 0) {
      toast({
        title: "Invalid amount",
        description: "Please enter a valid amount to invest",
        variant: "destructive",
      });
      return;
    }

    // Check if chain switch is needed
    if (needsChainSwitch) {
      await handleSwitchChain();
      return;
    }

    // Set initial investment state
    setIsInvesting(true);
    setCurrentTxIndex(0);
    setTotalTxCount(0);
    setTransactions([]);
    setProgressMessage("Creating investment action...");

    try {
      // 1. Create the StakeKit action
      const actionResponse = await actionEnter({
        integrationId: yieldOption.id,
        addresses: { address },
        args: { amount },
      });

      if (!actionResponse?.transactions?.length) {
        throw new Error("No transactions returned from action");
      }

      // 2. Process all transactions
      const successTxs = await processTransactions(actionResponse.transactions, {
        wallet: address,
        integrationId: yieldOption.id,
        yieldOpportunityId: yieldOption.id,
        amount: investAmount
      });

      // 3. Check if all transactions succeeded
      if (successTxs.length === actionResponse.transactions.length) {
        toast({
          title: "Investment successful",
          description: `You have successfully invested ${amount} ${yieldOption.token_symbol} in ${yieldOption.provider_name}`,
        });
      }
    } catch (error) {
      toast({
        title: "Investment failed",
        description:
          error instanceof Error
            ? error.message
            : "There was an error processing your investment",
        variant: "destructive",
      });
    } finally {
      setIsInvesting(false);
    }
  }, [
    address,
    amount,
    isConnected,
    processTransactions,
    toast,
    yieldOption.id,
    yieldOption.provider_name,
    yieldOption.token_symbol,
    handleSwitchChain,
    needsChainSwitch,
  ]);

  // Calculate estimated earnings
  const estimatedYield = Number.parseFloat(amount) * yieldOption.apy;
  const estimatedYearlyEarnings = isNaN(estimatedYield) ? 0 : estimatedYield;

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-lg bg-cream-100 border-2 border-gray-900 rounded-xl shadow-lg">
        <DialogHeader className="space-y-3">
          <DialogTitle className="text-2xl font-bold text-gray-900">
            Invest in {yieldOption.token_symbol}
          </DialogTitle>
          <div className="flex items-center gap-3">
            <div className="h-10 w-10 rounded-full bg-yellow-300 flex items-center justify-center border-2 border-gray-900">
              <span className="font-bold text-gray-900">
                {yieldOption.token_symbol.substring(0, 1)}
              </span>
            </div>
            <div className="space-y-1">
              <div className="flex items-center gap-2">
                <div className="font-bold text-lg text-gray-900">
                  {yieldOption.provider_name}
                </div>
                <Badge
                  variant="outline"
                  className={`${getChainColor(yieldOption.token_network)} bg-blue-100 text-blue-800 text-xs px-2 py-0.5 rounded-full border border-blue-300`}
                >
                  {yieldOption.token_network}
                </Badge>
              </div>
              <div className="text-xl font-bold text-orange-500">
                {formatPercentage(yieldOption.apy * 100)} APY
              </div>
            </div>
          </div>
        </DialogHeader>

        <div className="grid gap-6 py-6">
          <div className="bg-white rounded-lg p-4 border-2 border-gray-900 shadow-sm">
            <div className="flex items-center justify-between">
              <Label className="text-gray-900 font-medium">
                Available Balance
              </Label>
              <span className="font-bold text-gray-900">
                {balanceQuery.isLoading ? (
                  <LoaderIcon className="h-4 w-4 animate-spin inline" />
                ) : balanceQuery.isError ? (
                  <span className="text-red-600">Error loading</span>
                ) : (
                  `${maxAmount.toFixed(6)} ${yieldOption.token_symbol}`
                )}
              </span>
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 border-2 border-gray-900 shadow-sm space-y-4">
            <div className="flex items-center justify-between">
              <Label htmlFor="amount" className="text-gray-900 font-medium">
                Investment Amount
              </Label>
              <Button
                variant="outline"
                size="sm"
                onClick={handleMaxClick}
                className="h-7 text-xs bg-orange-100 border-orange-300 text-orange-800 hover:bg-orange-200 font-medium"
              >
                MAX
              </Button>
            </div>
            <div className="flex items-center gap-3">
              <Input
                id="amount"
                type="text"
                value={amount}
                onChange={handleAmountChange}
                placeholder="0.00"
                className="text-lg font-medium border-2 border-gray-900 rounded-lg focus:border-orange-500"
              />
              <span className="font-bold min-w-16 text-right text-gray-900 text-lg">
                {yieldOption.token_symbol}
              </span>
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 border-2 border-gray-900 shadow-sm space-y-3">
            <Label className="text-gray-900 font-medium">
              Percentage of Balance
            </Label>
            <div className="space-y-2">
              <div className="flex justify-between text-sm font-medium text-gray-700">
                <span>0%</span>
                <span>50%</span>
                <span>100%</span>
              </div>
              <Slider
                value={[percentage]}
                max={100}
                step={1}
                onValueChange={handlePercentageChange}
                className="w-full"
              />
              <div className="text-center">
                <span className="inline-block bg-orange-100 text-orange-800 px-3 py-1 rounded-full text-sm font-medium border border-orange-300">
                  {percentage.toFixed(0)}% of balance
                </span>
              </div>
            </div>
          </div>

          <div className="bg-cream-200 rounded-lg p-4 border-2 border-gray-900 shadow-sm space-y-3">
            <h3 className="font-bold text-gray-900 text-lg">
              Investment Summary
            </h3>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-gray-700 font-medium">
                  Estimated Yearly Yield
                </span>
                <span className="font-bold text-gray-900">
                  {estimatedYearlyEarnings.toFixed(4)}{" "}
                  {yieldOption.token_symbol}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-gray-700 font-medium">APY</span>
                <span className="font-bold text-orange-500 text-lg">
                  {formatPercentage(yieldOption.apy * 100)}
                </span>
              </div>
            </div>
          </div>
        </div>

        <DialogFooter className="flex gap-3 pt-6">
          <Button
            variant="outline"
            onClick={handleClose}
            disabled={isInvesting}
            className="flex-1 border-2 border-gray-900 bg-white hover:bg-gray-50 text-gray-900 font-medium"
          >
            Cancel
          </Button>
          <Button
            onClick={handleInvest}
            disabled={
              isInvesting ||
              isSwitchingChain ||
              !amount ||
              Number.parseFloat(amount) <= 0 ||
              balanceQuery.isLoading
            }
            className="flex-1 bg-orange-500 hover:bg-orange-600 border-2 border-gray-900 text-white font-bold shadow-md"
          >
            {isSwitchingChain ? (
              <>
                <LoaderIcon className="mr-2 h-4 w-4 animate-spin" />
                Switching Chain...
              </>
            ) : needsChainSwitch ? (
              <>
                Switch to {yieldOption.token_network}
                <ArrowRightIcon className="ml-2 h-4 w-4" />
              </>
            ) : isInvesting ? (
              <>
                <LoaderIcon className="mr-2 h-4 w-4 animate-spin" />
                <span className="truncate max-w-48">
                  {progressMessage || "Investing..."}
                  {totalTxCount > 0 &&
                    ` (${currentTxIndex + 1}/${totalTxCount})`}
                  {totalTxs > 0 && ` (${confirmedCount}/${totalTxs} confirmed)`}
                </span>
              </>
            ) : (
              <>
                Invest Now
                <ArrowRightIcon className="ml-2 h-4 w-4" />
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}



================================================
File: components/portfolio-client.tsx
================================================
"use client"

import { useAccount } from 'wagmi'
import { useQuery } from '@tanstack/react-query'
import type { PortfolioPosition } from '@/lib/portfolio-types'
import { Card, CardContent } from '@/components/ui/card'
import PositionCard from '@/components/position-card'

interface SummaryData {
  totalUsd: number
  avgApy: number
}

function fetchPortfolio(wallet: string) {
  return fetch(`/api/portfolio?wallet=${wallet}`).then((r) => r.json())
}

function SummaryCard({ totalUsd, avgApy }: SummaryData) {
  return (
    <Card className="p-4 bg-cream">
      <CardContent className="space-y-1">
        <div className="text-sm text-navy">Total Value</div>
        <div className="text-2xl font-bold text-navy">${totalUsd.toFixed(2)}</div>
        <div className="text-sm text-navy">Avg APY {avgApy.toFixed(2)}%</div>
      </CardContent>
    </Card>
  )
}

export default function PortfolioClient({ positions }: { positions: PortfolioPosition[] }) {
  const { address: wallet } = useAccount()

  const portfolioQuery = useQuery({
    queryKey: ['portfolio', wallet],
    queryFn: () => fetchPortfolio(wallet!),
    staleTime: 30_000,
    enabled: !!wallet,
    initialData: positions
  })

  const summaryQuery = useQuery({
    queryKey: ['portfolio-summary', wallet],
    queryFn: () =>
      fetch(`/api/portfolio/summary?wallet=${wallet}`).then((r) => r.json()),
    enabled: !!wallet
  })

  if (!wallet) {
    return <p className="text-center text-navy">Connect your wallet to view your portfolio.</p>
  }

  const data: PortfolioPosition[] = portfolioQuery.data || []
  const summary = summaryQuery.data as SummaryData | undefined

  return (
    <div className="space-y-6">
      {summary && <SummaryCard totalUsd={summary.totalUsd} avgApy={summary.avgApy} />}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {data.map((p) => (
          <PositionCard key={p.integration_id} {...(p as any)} />
        ))}
      </div>
    </div>
  )
}



================================================
File: components/position-card.tsx
================================================
"use client"

import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { useQueryClient } from '@tanstack/react-query'
import type { PortfolioPosition } from '@/lib/portfolio-types'
import { removePosition } from '@/lib/portfolio-utils'
import SyncBadge from '@/components/sync-badge'

interface YieldInfo {
  name: string
  apy: number
  tvl: number
}

interface Props extends PortfolioPosition {
  yieldOpportunity: YieldInfo
}

async function signAndSendExitTx(_integrationId: string, _amount: number) {
  return {
    async wait() {
      return { hash: '0x0' }
    }
  }
}

export default function PositionCard({
  wallet_address,
  integration_id,
  yield_opportunity_id,
  amount,
  usd_value,
  entry_date,
  apy,
  last_balance_sync,
  yieldOpportunity
}: Props) {
  const queryClient = useQueryClient()

  const handleExit = async () => {
    const tx = await signAndSendExitTx(integration_id, amount)
    const receipt = await tx.wait()

    await fetch('/api/transactions', {
      method: 'POST',
      body: JSON.stringify({
        walletAddress: wallet_address,
        integrationId: integration_id,
        yieldOpportunityId: yield_opportunity_id,
        direction: 'EXIT',
        amount,
        txHash: receipt.hash,
        executedAt: new Date().toISOString()
      })
    })

    queryClient.setQueryData(['portfolio', wallet_address], (old: any) =>
      removePosition(old as PortfolioPosition[], integration_id)
    )
  }

  return (
    <Card className="p-4 bg-cream flex flex-col gap-3">
      <CardContent className="flex flex-col gap-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="h-8 w-8 rounded-full bg-yellow flex items-center justify-center border-2 border-navy">
              <span className="text-navy font-bold">
                {yieldOpportunity.name.slice(0, 1)}
              </span>
            </div>
            <span className="font-bold text-navy">{yieldOpportunity.name}</span>
          </div>
          <SyncBadge lastBalanceSync={last_balance_sync} />
        </div>
        <div className="flex items-center justify-between text-navy">
          <span className="font-semibold">{amount}</span>
          {usd_value !== null && (
            <span className="text-sm">≈${usd_value.toFixed(2)}</span>
          )}
        </div>
        <div className="flex items-center justify-between text-navy">
          <span>APY {apy.toFixed(2)}%</span>
          <span className="text-sm">{new Date(entry_date).toLocaleDateString()}</span>
        </div>
        <div className="flex justify-end">
          <Button
            onClick={handleExit}
            aria-label={`Exit position in ${yieldOpportunity.name}`}
            className="bg-orange hover:bg-orange/90 text-navy border-2 border-navy"
          >
            Exit
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}



================================================
File: components/search-bar.tsx
================================================
import { useRouter } from "next/navigation";
import { useState } from "react";
import { Search, Sparkles } from "lucide-react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

const SearchBar = () => {
  const [isFocused, setIsFocused] = useState(false);
  const [query, setQuery] = useState("");
  const router = useRouter();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (query.trim()) {
      router.push(`/search?q=${encodeURIComponent(query)}`);
    }
  };

  const handleFocus = () => {
    setIsFocused(true);
  };

  const handleBlur = () => {
    setIsFocused(false);
  };

  return (
    <div className="w-full">
      <form
        onSubmit={handleSubmit}
        className={cn(
          "w-full relative transition-all duration-300 ease-in-out",
          isFocused ? "scale-105" : "scale-100",
        )}
      >
        <div
          className={cn(
            "relative flex items-center bg-white border-2 rounded-xl transition-all duration-300",
            isFocused
              ? "shadow-lg border-orange-500"
              : "shadow-md border-gray-900 hover:border-gray-600",
          )}
        >
          <Search
            className={cn(
              "h-5 w-5 ml-4 transition-colors",
              isFocused ? "text-orange-500" : "text-gray-400",
            )}
          />
          <input
            type="text"
            placeholder="Search for DeFi yield opportunities..."
            className="w-full py-4 px-3 text-base text-gray-900 bg-transparent outline-none"
            value={query}
            onFocus={handleFocus}
            onBlur={handleBlur}
            onChange={(e) => setQuery(e.target.value)}
          />
          <Button
            type="submit"
            size="lg"
            disabled={!query.trim()}
            className="mr-2 rounded-lg transition-all bg-orange-500 hover:bg-orange-600 border border-gray-900"
            aria-label="Search"
          >
            <Sparkles className="h-4 w-4" />
            Search
          </Button>
        </div>
      </form>
    </div>
  );
};

export default SearchBar;



================================================
File: components/search-results.tsx
================================================
interface SearchResultsProps {
  isSearching: boolean;
  query?: string;
}

const SearchResults = ({ isSearching, query }: SearchResultsProps) => {
  if (!isSearching && !query) {
    return null;
  }

  return (
    <div className="w-full max-w-2xl mt-8 rounded-xl bg-white border-2 border-gray-900 shadow-md p-6">
      {isSearching ? (
        <div className="space-y-4">
          <div className="flex items-center">
            <div className="h-10 w-10 rounded-full bg-orange-100 flex items-center justify-center border border-orange-300">
              <span className="text-orange-500 font-medium">AI</span>
            </div>
            <div className="ml-3">
              <p className="font-medium text-gray-900">OHMYYIELD Assistant</p>
              <p className="text-sm text-gray-500">Searching...</p>
            </div>
          </div>
          <div className="space-y-2">
            <div className="h-4 bg-gray-100 rounded animate-pulse-subtle w-full"></div>
            <div className="h-4 bg-gray-100 rounded animate-pulse-subtle w-11/12"></div>
            <div className="h-4 bg-gray-100 rounded animate-pulse-subtle w-10/12"></div>
            <div className="h-4 bg-gray-100 rounded animate-pulse-subtle w-9/12"></div>
          </div>
        </div>
      ) : query ? (
        <div className="space-y-4">
          <div className="flex items-center">
            <div className="h-10 w-10 rounded-full bg-orange-100 flex items-center justify-center border border-orange-300">
              <span className="text-orange-500 font-medium">AI</span>
            </div>
            <div className="ml-3">
              <p className="font-medium text-gray-900">OHMYYIELD Assistant</p>
            </div>
          </div>
          <p className="text-gray-700">
            Searching for yield opportunities that match your query: &quot;{query}&quot;
          </p>
          <div className="text-sm text-gray-500 pt-2 border-t border-gray-200">
            <p>Your results will appear here soon.</p>
          </div>
        </div>
      ) : null}
    </div>
  );
};

export default SearchResults;



================================================
File: components/sync-badge.tsx
================================================
"use client"

import { Badge } from '@/components/ui/badge'
import { formatDistanceToNow } from 'date-fns'
import { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from '@/components/ui/tooltip'

export default function SyncBadge({ lastBalanceSync }: { lastBalanceSync: string | null }) {
  if (!lastBalanceSync) {
    return null
  }

  const diffSec = (Date.now() - new Date(lastBalanceSync).getTime()) / 1000
  const label = diffSec < 60
    ? 'Synced just now'
    : `Synced ${formatDistanceToNow(new Date(lastBalanceSync))} ago`

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Badge variant="outline" className="ml-auto">
            {label}
          </Badge>
        </TooltipTrigger>
        <TooltipContent>{new Date(lastBalanceSync).toLocaleString()}</TooltipContent>
      </Tooltip>
    </TooltipProvider>
  )
}



================================================
File: components/wallet-options.tsx
================================================
"use client";

import * as React from "react";
import { Connector, useConnect } from "wagmi";
import { Button } from "@/components/ui/button";
import { Wallet } from "lucide-react";

export function WalletOptions() {
  const { connectors, connect } = useConnect();

  if (connectors.length === 0) {
    return null;
  }

  const connector =
    connectors.filter((c) => c.icon !== undefined)[0] || connectors[0];

  return (
    <WalletOption
      key={connector.uid}
      connector={connector}
      onClick={() => connect({ connector })}
    />
  );

  // return connectors.map((connector) => (
  //   <WalletOption
  //     key={connector.uid}
  //     connector={connector}
  //     onClick={() => connect({ connector })}
  //   />
  // ));
}

function WalletOption({
  connector,
  onClick,
}: {
  connector: Connector;
  onClick: () => void;
}) {
  const handleClick = async () => {
    const provider = await connector.getProvider();
    if (provider) {
      onClick();
    }
  };

  return (
    <Button
      onClick={handleClick}
      className="bg-white text-gray-900 hover:bg-gray-100 font-semibold border border-gray-900 shadow-md"
    >
      <Wallet className="mr-2 h-4 w-4" /> Connect Wallet
      {/* Connect with {connector.name} */}
    </Button>
  );
}



================================================
File: components/yield-card.tsx
================================================
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { YieldResult } from "@/lib/types";
import { Badge } from "@/components/ui/badge";
import { formatAPY } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { ArrowRight } from "lucide-react";
import { useAccount } from "wagmi";
import { InvestmentModal } from "@/components/investment-modal";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";

const getChainColor = (chain: string) => {
  switch (chain.toLowerCase()) {
    case "ethereum":
      return "bg-blue/20 text-navy border-blue";
    case "polygon":
      return "bg-orange/20 text-navy border-orange";
    case "avalanche":
      return "bg-orange/20 text-navy border-orange";
    case "solana":
      return "bg-blue/20 text-navy border-blue";
    case "arbitrum":
      return "bg-blue/20 text-navy border-blue";
    case "optimism":
      return "bg-orange/20 text-navy border-orange";
    case "base":
      return "bg-blue/20 text-navy border-blue";
    default:
      return "bg-navy/10 text-navy border-navy";
  }
};

export function YieldCard({ yieldItem }: { yieldItem: YieldResult }) {
  const { toast } = useToast();
  const { isConnected } = useAccount();
  const [isInvestmentModalOpen, setIsInvestmentModalOpen] = useState(false);

  // const {
  //   data: actionResponse,
  //   isPending: isLoadingActionData,
  //   error: actionDataError,
  //   mutate: createActionEnter,
  // } = useActionEnter();

  // const { data: txHash, sendTransaction } = useSendTransaction();

  // const { data: createTransactionResponse, mutate: createTransaction } =
  //   useTransactionConstruct();

  const handleInvestClick = () => {
    if (!isConnected) {
      toast({
        title: "Wallet not connected",
        description: "Please connect your wallet to invest",
        variant: "destructive",
      });
      return;
    }

    setIsInvestmentModalOpen(true);

    // if (!isConnected || !address) return;
    // const action = createActionEnter({
    //   data: {
    //     integrationId: yieldItem.id,
    //     addresses: { address },
    //     args: { amount: "0.00001" },
    //   },
    // });

    // console.log(`action: `, action);

    // if (action && action.transactions) {
    //   for (tx of action.transactions) {
    //     const txData = await createTransaction({
    //       data: {
    //         transaction: tx,
    //         address,
    //       },
    //     });
    //     console.log(`txData: ${JSON.stringify(txData, null
    //   }
    // }

    //   console.log(`createActionEnter: `, createActionEnter);
    //   console.log(`actionDataError: ${JSON.stringify(actionDataError, null, 2)}`);
    //   console.log(`isLoadingActionData: ${isLoadingActionData}`);
  };

  // useEffect(() => {
  //   if (actionResponse) {
  //     const transactions = actionResponse.transactions;

  //     for (const tx of transactions) {
  //       const txData = createTransaction({ transactionId: tx.id, data: {} });
  //       console.log(`txData: ${JSON.stringify(txData, null, 2)}`);
  //     }
  //   }
  // }, [actionResponse]);

  // useEffect(() => {
  //   console.log(
  //     `createTransactionResponse: ${JSON.stringify(createTransactionResponse, null, 2)}`,
  //   );

  //   if (
  //     createTransactionResponse &&
  //     createTransactionResponse?.unsignedTransaction
  //   ) {
  //     try {
  // const transaction = JSON.parse(
  //   createTransactionResponse?.unsignedTransaction,
  // );
  //
  // const transaction = {
  //   from: "0x9e0f0d83dD880240e3506A7Ac4CE82500b2bD92B",
  //   gasLimit: "0x0e1398",
  //   value: "10000000000000",
  //   to: "0x74a09653A083691711cF8215a6ab074BB4e99ef5",
  //   data: "0x5358fbda000000000000000000000000c23287cdc37938079dbda6954b7edf755b17ae72",
  //   nonce: 251,
  //   type: 2,
  //   maxFeePerGas: "0xfb881700",
  //   maxPriorityFeePerGas: "0x054e0840",
  //   chainId: 1,
  // };
  // if (!transaction) return;
  // sendTransaction({
  //   value: BigInt(transaction.value),
  //   to: transaction.to as `0x${string}`,
  //   data: transaction.data as `0x${string}`,
  // });
  //     } catch (e) {
  //       console.log(`e: ${e}`);
  //     }
  //     console.log(
  //       `unsignedTransaction: ${createTransactionResponse?.unsignedTransaction}`,
  //     );
  //   }
  // }, [createTransactionResponse]);

  // useEffect(() => {
  //   if (txHash) {
  //     console.log(`txHash: ${txHash}`);
  //   }
  // }, [txHash]);

  return (
    <>
      <Card className="mt-3">
        <CardContent>
          <div className="flex justify-between items-center">
            <div className="p-4 flex items-center space-x-4 flex-grow">
              <div className="h-12 w-12 rounded-full bg-yellow-300 flex items-center justify-center border-2 border-gray-900">
                <span className="font-bold text-gray-900">
                  {yieldItem.token_symbol.substring(0, 1)}
                </span>
              </div>
              <div className="space-y-1">
                <div className="font-bold text-lg">
                  {yieldItem.token_symbol}
                </div>
                <div className="flex items-center gap-2">
                  <Badge
                    variant="outline"
                    className={`${getChainColor(yieldItem.token_network)} bg-blue-100 text-blue-800 text-xs px-2 py-0.5 rounded-full border border-blue-300`}
                  >
                    {yieldItem.token_network}
                  </Badge>
                  <span className="text-navy/70">
                    • {yieldItem.provider_name}
                  </span>
                </div>
                <div className="space-y-1">
                  <span className="text-sm text-navy/70 font-medium">APY</span>
                  <div className="text-xl font-bold text-orange-500">
                    {formatAPY(yieldItem.apy)}%
                  </div>
                </div>
              </div>
            </div>
            <div className="p-4 bg-cream-200 h-full">
              <Button
                onClick={handleInvestClick}
                className="bg-orange-500 hover:bg-orange-600 border border-gray-900"
              >
                Invest Now <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
      <InvestmentModal
        isOpen={isInvestmentModalOpen}
        handleClose={() => setIsInvestmentModalOpen(false)}
        yieldOption={yieldItem}
      />
    </>
  );
}



================================================
File: components/yield-results.tsx
================================================
"use client";

import { Badge } from "@/components/ui/badge";
import type { YieldResult } from "@/lib/types";
import { YieldCard } from "@/components/yield-card";

interface YieldResultsProps {
  query: string;
  results?: YieldResult[];
}

export function YieldResults({ query, results = [] }: YieldResultsProps) {
  if (!results || results.length === 0) {
    return (
      <div className="py-8 text-center text-navy/70 font-medium">
        No yield opportunities found for this query. Try a different search.
      </div>
    );
  }

  return (
    <div>
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-gray-900">
          Results for &quot;{query}&quot;
        </h2>
        <Badge
          variant="outline"
          className="bg-orange-100 text-orange-800 text-sm font-medium px-2.5 py-0.5 rounded-full border border-orange-300"
        >
          {results.length} results
        </Badge>
      </div>
      <div className="mt-4">
        {results.map((item, index) => (
          <YieldCard
            data-id={item.id}
            key={`yield-${index}`}
            yieldItem={item}
          />
        ))}
      </div>
    </div>
  );
}



================================================
File: components/ui/badge.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



================================================
File: components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-70 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };



================================================
File: components/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("border-2 border-gray-900 rounded-lg", className)}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={className} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={className} {...props} />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};



================================================
File: components/ui/dialog.tsx
================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================
File: components/ui/input.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };



================================================
File: components/ui/label.tsx
================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================
File: components/ui/slider.tsx
================================================
"use client";

import * as React from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";

import { cn } from "@/lib/utils";

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className,
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };



================================================
File: components/ui/toast.tsx
================================================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



================================================
File: components/ui/toaster.tsx
================================================
"use client";

import { useToast } from "@/hooks/use-toast";
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast";

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}



================================================
File: components/ui/tooltip.tsx
================================================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



================================================
File: hooks/use-toast.tsx
================================================
"use client";

// Inspired by react-hot-toast library
import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };



================================================
File: integrations/supabase/client.ts
================================================
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = process.env.NEXT_PUBLIC_SUPABASE_API_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error(
    "Supabase URL and/or public key not found. Please add them to .env",
  );
}

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
);



================================================
File: integrations/supabase/types.ts
================================================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      _prisma_migrations: {
        Row: {
          applied_steps_count: number
          checksum: string
          finished_at: string | null
          id: string
          logs: string | null
          migration_name: string
          rolled_back_at: string | null
          started_at: string
        }
        Insert: {
          applied_steps_count?: number
          checksum: string
          finished_at?: string | null
          id: string
          logs?: string | null
          migration_name: string
          rolled_back_at?: string | null
          started_at?: string
        }
        Update: {
          applied_steps_count?: number
          checksum?: string
          finished_at?: string | null
          id?: string
          logs?: string | null
          migration_name?: string
          rolled_back_at?: string | null
          started_at?: string
        }
        Relationships: []
      }
      portfolio_position: {
        Row: {
          amount: number
          category: string
          current_apy: number
          entry_date: string
          entry_tx_hash: string | null
          exit_tx_hash: string | null
          id: string
          is_active: boolean
          last_modified: string
          token_address: string | null
          token_symbol: string
          yield_opportunity_id: string
        }
        Insert: {
          amount: number
          category: string
          current_apy: number
          entry_date: string
          entry_tx_hash?: string | null
          exit_tx_hash?: string | null
          id: string
          is_active?: boolean
          last_modified: string
          token_address?: string | null
          token_symbol: string
          yield_opportunity_id: string
        }
        Update: {
          amount?: number
          category?: string
          current_apy?: number
          entry_date?: string
          entry_tx_hash?: string | null
          exit_tx_hash?: string | null
          id?: string
          is_active?: boolean
          last_modified?: string
          token_address?: string | null
          token_symbol?: string
          yield_opportunity_id?: string
        }
        Relationships: []
      }
      portfolio_rebalance: {
        Row: {
          amount: number
          annual_income_change: number
          executed_at: string
          from_apy: number
          from_position_id: string
          gas_cost: number
          id: string
          to_apy: number
          to_position_id: string
        }
        Insert: {
          amount: number
          annual_income_change: number
          executed_at: string
          from_apy: number
          from_position_id: string
          gas_cost: number
          id: string
          to_apy: number
          to_position_id: string
        }
        Update: {
          amount?: number
          annual_income_change?: number
          executed_at?: string
          from_apy?: number
          from_position_id?: string
          gas_cost?: number
          id?: string
          to_apy?: number
          to_position_id?: string
        }
        Relationships: []
      }
      YieldOpportunity: {
        Row: {
          apy: number
          asset: string
          can_enter: boolean
          can_exit: boolean
          content: string | null
          cooldown_days: number | null
          created_at: string
          id: string
          is_available: boolean
          metadata_type: string
          name: string
          protocol: string
          provider_id: string
          provider_name: string
          reward_type: string
          token_address: string | null
          token_network: string
          token_symbol: string
          tvl: number
          updated_at: string
          warmup_days: number | null
          withdraw_days: number | null
        }
        Insert: {
          apy: number
          asset?: string
          can_enter?: boolean
          can_exit?: boolean
          content?: string | null
          cooldown_days?: number | null
          created_at?: string
          id: string
          is_available?: boolean
          metadata_type: string
          name: string
          protocol?: string
          provider_id: string
          provider_name: string
          reward_type: string
          token_address?: string | null
          token_network: string
          token_symbol: string
          tvl?: number
          updated_at: string
          warmup_days?: number | null
          withdraw_days?: number | null
        }
        Update: {
          apy?: number
          asset?: string
          can_enter?: boolean
          can_exit?: boolean
          content?: string | null
          cooldown_days?: number | null
          created_at?: string
          id?: string
          is_available?: boolean
          metadata_type?: string
          name?: string
          protocol?: string
          provider_id?: string
          provider_name?: string
          reward_type?: string
          token_address?: string | null
          token_network?: string
          token_symbol?: string
          tvl?: number
          updated_at?: string
          warmup_days?: number | null
          withdraw_days?: number | null
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      execute_query: {
        Args: {
          sql_query: string
        }
        Returns: Json
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof PublicSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof PublicSchema["CompositeTypes"]
    ? PublicSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never


================================================
File: lib/chains-map.ts
================================================
const chainsMap: Record<string, number> = {
  ethereum: 1,
  optimism: 10,
  polygon: 137,
  arbitrum: 42161,
  base: 8453,
};

export default chainsMap;



================================================
File: lib/langgraph-client.ts
================================================
import { Client } from "@langchain/langgraph-sdk";

// Create client on demand to avoid initialization issues in Next.js
export async function queryLangGraph(question: string) {
  try {
    // Initialize the client inside the function for server component usage
    const client = new Client({ apiUrl: "http://localhost:2024" });
    
    const results = [];
    const streamResponse = client.runs.stream(
      null, // Threadless run
      "agent", // Assistant ID
      {
        input: {
          question
        },
        streamMode: "updates",
      }
    );

    for await (const chunk of streamResponse) {
      if (chunk.data?.execute_query?.result) {
        results.push(...chunk.data.execute_query.result);
      }
    }

    return results;
  } catch (error) {
    console.error("Error querying LangGraph:", error);
    return [];
  }
} 


================================================
File: lib/mock-data.ts
================================================
import type { YieldData } from "./types"

// Mock data generator
export function getMockYieldData(query: string): YieldData[] {
  // Base data
  const baseData: YieldData[] = [
    {
      id: "ethereum-renzo-ezeth-staking",
      name: "Renzo Restaking",
      token_symbol: "ETH",
      token_network: "ethereum",
      provider_name: "Renzo",
      apy: 0.0392762000394306,
      metadata_type: "restaking",
      token_address: null,
      provider_id: "renzo",
      protocol: "renzo",
      asset: "ETH",
      tvl: 0,
      cooldown_days: null,
      warmup_days: null,
      withdraw_days: null
    },
    {
      id: "ethereum-eth-etherfi-staking",
      name: "Ether.fi Restaking",
      token_symbol: "ETH",
      token_network: "ethereum",
      provider_name: "Ether.fi",
      apy: 0.0354267875115386,
      metadata_type: "restaking",
      token_address: null,
      provider_id: "etherfi",
      protocol: "ether.fi",
      asset: "ETH",
      tvl: 0,
      cooldown_days: 7,
      warmup_days: null,
      withdraw_days: null
    },
    {
      id: "ethereum-eth-everstake-staking",
      name: "Everstake Pooled ETH Staking",
      token_symbol: "ETH",
      token_network: "ethereum",
      provider_name: "Everstake",
      apy: 0.0349892654549052,
      metadata_type: "staking",
      token_address: null,
      provider_id: "everstake",
      protocol: "everstake",
      asset: "ETH",
      tvl: 0,
      cooldown_days: 9,
      warmup_days: 2,
      withdraw_days: null
    },
    {
      id: "ethereum-eth-luganodes-staking",
      name: "Luganodes Native Staking",
      token_symbol: "ETH",
      token_network: "ethereum",
      provider_name: "Luganodes",
      apy: 0.0323,
      metadata_type: "staking",
      token_address: null,
      provider_id: "luganodes",
      protocol: "luganodes",
      asset: "ETH",
      tvl: 0,
      cooldown_days: 1,
      warmup_days: 8,
      withdraw_days: null
    },
    {
      id: "ethereum-eth-p2p-staking",
      name: "P2P.org Native Staking",
      token_symbol: "ETH",
      token_network: "ethereum",
      provider_name: "P2P.org",
      apy: 0.0319584355553912,
      metadata_type: "staking",
      token_address: null,
      provider_id: "P2P",
      protocol: "p2p.org",
      asset: "ETH",
      tvl: 0,
      cooldown_days: 1,
      warmup_days: 8,
      withdraw_days: null
    }
  ]

  // Filter and modify data based on query
  if (query.toLowerCase().includes("stablecoin")) {
    return [
      {
        id: "ethereum-usdc-bbidlecppor-usdc4626-0xa35b7a9fe5dc4cd51ba47acdf67b0f41c893329a-4626-vault",
        name: "USDC Portofino Technologies Junior Tranches Idle Vault",
        token_symbol: "USDC",
        token_network: "ethereum",
        provider_name: "Idle Finance",
        apy: 0.149,
        metadata_type: "vault",
        token_address: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
        provider_id: "idle-finance",
        protocol: "idle finance",
        asset: "USDC",
        tvl: 0,
        cooldown_days: null,
        warmup_days: null,
        withdraw_days: null
      },
      {
        id: "ethereum-usdc-aaidlecppor-usdc4626-0x291eecab3a2d3f403745968c14edbb227d183636-4626-vault",
        name: "USDC Portofino Technologies Senior Tranches Idle Vault",
        token_symbol: "USDC",
        token_network: "ethereum",
        provider_name: "Idle Finance",
        apy: 0.1152,
        metadata_type: "vault",
        token_address: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
        provider_id: "idle-finance",
        protocol: "idle finance",
        asset: "USDC",
        tvl: 0,
        cooldown_days: null,
        warmup_days: null,
        withdraw_days: null
      },
      {
        id: "base-usdc-re7usdc-0x12afdefb2237a5963e7bab3e2d46ad0eee70406e-4626-vault",
        name: "Re7 USDC Morpho Blue Vault",
        token_symbol: "USDC",
        token_network: "base",
        provider_name: "Morpho Blue",
        apy: 0.0905848555040482,
        metadata_type: "vault",
        token_address: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
        provider_id: "morpho-blue",
        protocol: "morpho blue",
        asset: "USDC",
        tvl: 0,
        cooldown_days: null,
        warmup_days: null,
        withdraw_days: null
      },
      {
        id: "base-usdc-gtusdcc-0xc0c5689e6f4d256e861f65465b691aeecc0deb12-4626-vault",
        name: "Gauntlet USDC Core Morpho Blue Vault",
        token_symbol: "USDC",
        token_network: "base",
        provider_name: "Morpho Blue",
        apy: 0.0884740925836527,
        metadata_type: "vault",
        token_address: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
        provider_id: "morpho-blue",
        protocol: "morpho blue",
        asset: "USDC",
        tvl: 0,
        cooldown_days: null,
        warmup_days: null,
        withdraw_days: null
      },
      {
        id: "arbitrum-usdc-dusdcv3-0x890a69ef363c9c7bdd5e36eb95ceb569f63acbf6-4626-vault",
        name: "USDC Main USDC v3 Gearbox Vault",
        token_symbol: "USDC",
        token_network: "arbitrum",
        provider_name: "Gearbox",
        apy: 0.0883,
        metadata_type: "lending",
        token_address: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
        provider_id: "gearbox",
        protocol: "gearbox",
        asset: "USDC",
        tvl: 0,
        cooldown_days: null,
        warmup_days: null,
        withdraw_days: null
      },
      {
        id: "ethereum-usdt-dusdtv3-0x05a811275fe9b4de503b3311f51edf6a856d936e-4626-vault",
        name: "USDT Universal USDT v3 Gearbox Vault",
        token_symbol: "USDT",
        token_network: "ethereum",
        provider_name: "Gearbox",
        apy: 0.079,
        metadata_type: "lending",
        token_address: "0xdac17f958d2ee523a2206206994597c13d831ec7",
        provider_id: "gearbox",
        protocol: "gearbox",
        asset: "USDT",
        tvl: 0,
        cooldown_days: null,
        warmup_days: null,
        withdraw_days: null
      },
      {
        id: "ethereum-usdc-usualusdc+-0xd63070114470f685b75b74d60eec7c1113d33a3d-4626-vault",
        name: "Usual Boosted USDC Morpho Blue Vault",
        token_symbol: "USDC",
        token_network: "ethereum",
        provider_name: "Morpho Blue",
        apy: 0.0785733081219144,
        metadata_type: "vault",
        token_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        provider_id: "morpho-blue",
        protocol: "morpho blue",
        asset: "USDC",
        tvl: 0,
        cooldown_days: null,
        warmup_days: null,
        withdraw_days: null
      },
      {
        id: "arbitrum-usdt-fusdt-0x4a03f37e7d3fc243e3f99341d36f4b829bee5e03-4626-vault",
        name: "USDT Fluid Lender",
        token_symbol: "USDT",
        token_network: "arbitrum",
        provider_name: "Fluid",
        apy: 0.0738,
        metadata_type: "lending",
        token_address: "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
        provider_id: "fluid",
        protocol: "fluid",
        asset: "USDT",
        tvl: 0,
        cooldown_days: null,
        warmup_days: null,
        withdraw_days: null
      },
      {
        id: "ethereum-usdc-gtusdc-0xdd0f28e19c1780eb6396170735d45153d261490d-4626-vault",
        name: "Gauntlet USDC Prime Morpho Blue Vault",
        token_symbol: "USDC",
        token_network: "ethereum",
        provider_name: "Morpho Blue",
        apy: 0.0717569971511396,
        metadata_type: "vault",
        token_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        provider_id: "morpho-blue",
        protocol: "morpho blue",
        asset: "USDC",
        tvl: 0,
        cooldown_days: null,
        warmup_days: null,
        withdraw_days: null
      },
      {
        id: "ethereum-usdc-steakusdc-0xbeef01735c132ada46aa9aa4c54623caa92a64cb-4626-vault",
        name: "Steakhouse USDC Morpho Blue Vault",
        token_symbol: "USDC",
        token_network: "ethereum",
        provider_name: "Morpho Blue",
        apy: 0.0715249006847888,
        metadata_type: "vault",
        token_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        provider_id: "morpho-blue",
        protocol: "morpho blue",
        asset: "USDC",
        tvl: 0,
        cooldown_days: null,
        warmup_days: null,
        withdraw_days: null
      }
    ]
  }

  // Simplified ETH query condition
  if (query.toLowerCase().includes("eth")) {
    return baseData.filter(item => item.token_symbol === "ETH")
  }

  // Default: return all sorted by APY
  return [...baseData].sort((a, b) => b.apy - a.apy)
}




================================================
File: lib/portfolio-types.ts
================================================
export interface PortfolioPosition {
  wallet_address: string
  integration_id: string
  yield_opportunity_id: string
  amount: number
  usd_value: number | null
  entry_date: string
  apy: number
  last_balance_sync: string | null
}



================================================
File: lib/portfolio-utils.ts
================================================
import type { PortfolioPosition } from './portfolio-types'

export function removePosition(data: PortfolioPosition[] | undefined, integrationId: string): PortfolioPosition[] {
  if (!data) return []
  return data.filter((p) => p.integration_id !== integrationId)
}

export function addOrUpdatePosition(data: PortfolioPosition[] | undefined, position: PortfolioPosition): PortfolioPosition[] {
  if (!data) return [position]
  const idx = data.findIndex((p) => p.integration_id === position.integration_id)
  if (idx >= 0) {
    const copy = [...data]
    copy[idx] = position
    return copy
  }
  return [...data, position]
}



================================================
File: lib/prisma.ts
================================================
import { PrismaClient } from '@omy/database';

const globalForPrisma = globalThis as unknown as {
  prisma?: PrismaClient;
};

export const prisma =
  globalForPrisma.prisma ??
  new PrismaClient();

if (process.env.NODE_ENV !== 'production') {
  globalForPrisma.prisma = prisma;
}



================================================
File: lib/search-service-supabase.ts
================================================
import type { YieldResult } from "./types";
import { supabase } from "@/integrations/supabase/client";

// Server-side search function optimized for server components
export async function getSearchResults(query: string): Promise<YieldResult[]> {
  // console.log(`query: ${query}`);
  // try {
  //   if (!query.trim()) {
  //     return [];
  //   }

  //   const { data: textToSqlData, error: textToSqlError } =
  //     await supabase.functions.invoke("text-to-sql", {
  //       body: { query },
  //     });

  //   if (textToSqlError) {
  //     throw new Error(
  //       `Error converting text to SQL: ${textToSqlError.message}`,
  //     );
  //   }

  //   if (!textToSqlData.isRelevantToYield) {
  //     throw new Error(
  //       `Your query doesn't seem to be about yield opportunities. Please try a different query.`,
  //     );
  //   }

  //   if (!textToSqlData.sql || textToSqlData.sql.trim() === "SELECT") {
  //     throw new Error(
  //       `No Yield data related to this query has been found. Please try rephrasing your question.`,
  //     );
  //   }

  //   console.log(`textToSqlData: ${JSON.stringify(textToSqlData)}`);

  //   // Clean the SQL query before sending to DB
  //   let cleanSql = textToSqlData.sql
  //     .replace(/\\"/g, '"')
  //     .replace(/;/g, "")
  //     .trim();

  //   cleanSql = cleanSql.replace(
  //     /FROM\s+public\.\"YieldOpportunity\"/i,
  //     'FROM "public"."YieldOpportunity"',
  //   );
  //   cleanSql = cleanSql.replace(
  //     /FROM\s+\"public\"\.YieldOpportunity/i,
  //     'FROM "public"."YieldOpportunity"',
  //   );
  //   cleanSql = cleanSql.replace(
  //     /FROM\s+public\.YieldOpportunity/i,
  //     'FROM "public"."YieldOpportunity"',
  //   );
  //   if (!cleanSql.startsWith("SELECT") || !cleanSql.includes("FROM")) {
  //     throw new Error("Generated SQL query is incomplete or invalid");
  //   }

  //   // Execute the SQL query using Supabase
  //   const { data: queryResults, error: queryError } = await supabase.rpc(
  //     "execute_query",
  //     {
  //       sql_query: cleanSql,
  //     },
  //   );

  //   if (queryError) {
  //     throw new Error(`Error executing SQL query: ${queryError.message}`);
  //   }

  //   // Ensure we're setting an array of YieldResult objects
  //   const typedResults = Array.isArray(queryResults)
  //     ? (queryResults as YieldResult[])
  //     : [];

  //   console.log(`typedResults: ${JSON.stringify(typedResults)}`);

  //   return typedResults;

  // return [
  //   {
  //     id: "ethereum-renzo-ezeth-staking",
  //     apy: 0.0375784347090288,
  //     tvl: 0,
  //     protocol: "renzo",
  //     token_symbol: "ETH",
  //     provider_name: "Renzo",
  //     token_network: "ethereum",
  //   },
  //   {
  //     id: "ethereum-eth-etherfi-staking",
  //     apy: 0.0345411749973301,
  //     tvl: 0,
  //     protocol: "ether.fi",
  //     token_symbol: "ETH",
  //     provider_name: "Ether.fi",
  //     token_network: "ethereum",
  //   },
  //   {
  //     id: "ethereum-eth-luganodes-staking",
  //     apy: 0.0304,
  //     tvl: 0,
  //     protocol: "luganodes",
  //     token_symbol: "ETH",
  //     provider_name: "Luganodes",
  //     token_network: "ethereum",
  //   },
  //   {
  //     id: "ethereum-eth-chorus-one-stakewise-staking",
  //     apy: 0.0294279829298821,
  //     tvl: 0,
  //     protocol: "chorus one",
  //     token_symbol: "ETH",
  //     provider_name: "Chorus One",
  //     token_network: "ethereum",
  //   },
  //   {
  //     id: "ethereum-eth-p2p-staking",
  //     apy: 0.0293315030855261,
  //     tvl: 0,
  //     protocol: "p2p.org",
  //     token_symbol: "ETH",
  //     provider_name: "P2P.org",
  //     token_network: "ethereum",
  //   },
  // ];
  //
  return [
    {
      id: "polygon-usdc-aave-v3-lending",
      apy: 0.0355161343162091,
      tvl: 0,
      protocol: "aave",
      token_symbol: "USDC",
      provider_name: "Aave",
      token_address: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359",
      token_network: "polygon",
    },
  ];
  // } catch (error) {
  //   console.error("Error getting search results:", error);
  //   return [];
  // }
}

// Client-side search function (kept for backward compatibility)
export const performSearch = getSearchResults;



================================================
File: lib/search-service.ts
================================================
import type { YieldData } from "./types"
import { queryLangGraph } from "./langgraph-client"

// Server-side search function optimized for server components
export async function getSearchResults(query: string): Promise<YieldData[]> {
  try {
    if (!query.trim()) {
      return [];
    }
    
    const searchQuery = `Show me yields matching "${query}". Show all columns except rewardType, isAvailable, canEnter, canExit, updatedAt, createdAt`;
    return await queryLangGraph(searchQuery);
  } catch (error) {
    console.error("Error getting search results:", error)
    return []
  }
}

// Client-side search function (kept for backward compatibility)
export const performSearch = getSearchResults;




================================================
File: lib/types.ts
================================================
import type { Networks } from "@stakekit/api-hooks";

export interface YieldData {
  id: string;
  name: string;
  token_symbol: string;
  token_network: string;
  provider_name: string;
  apy: number;
  metadata_type: string;
  token_address: string | null;
  provider_id: string;
  protocol: string;
  asset: string;
  tvl: number;
  cooldown_days: number | null;
  warmup_days: number | null;
  withdraw_days: number | null;
}

export interface YieldResult {
  id: string;
  token_network: keyof typeof Networks;
  token_symbol: string;
  token_address: string | null;
  protocol: string;
  provider_name: string;
  apy: number;
  tvl: number;
  [key: string]: string | number | null;
}



================================================
File: lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatPercentage(value: number): string {
  return `${value.toFixed(2)}%`;
}

export function truncateAddress(address: string): string {
  if (!address) return "";
  return `${address.slice(0, 6)}...${address.slice(-4)}`;
}

export function formatCurrency(value: number): string {
  // Format large numbers with K, M, B suffixes
  if (value >= 1_000_000_000) {
    return `$${(value / 1_000_000_000).toFixed(1)}B`;
  } else if (value >= 1_000_000) {
    return `$${(value / 1_000_000).toFixed(1)}M`;
  } else if (value >= 1_000) {
    return `$${(value / 1_000).toFixed(1)}K`;
  } else {
    return `$${value.toFixed(2)}`;
  }
}

export function formatAPY(apy: number): string {
  return (apy * 100).toFixed(2);
}



================================================
File: providers/providers.tsx
================================================
"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { type ReactNode, useState } from "react";
import { WagmiProvider, State } from "wagmi";
import { StakeKitApiClient } from "@stakekit/api-hooks";
import { getConfig } from "../wagmiConfig";

type Props = {
  children: ReactNode;
  initialState: State | undefined;
};

const STAKEKIT_API_KEY = process.env.NEXT_PUBLIC_STAKEKIT_API_KEY;
const STAKEKIT_API_BASE_URL = process.env.NEXT_PUBLIC_STAKEKIT_API_BASE_URL;

if (!STAKEKIT_API_KEY || !STAKEKIT_API_BASE_URL) {
  throw new Error(
    "StakeKit API key and base URL must be set in environment variables",
  );
}

StakeKitApiClient.configure({
  apiKey: STAKEKIT_API_KEY || "",
  baseURL: STAKEKIT_API_BASE_URL,
});

export function Providers({ children, initialState }: Props) {
  const [config] = useState(() => getConfig());
  const [queryClient] = useState(() => new QueryClient());

  return (
    <WagmiProvider config={config} initialState={initialState}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}




================================================
File: tests/api-transactions.test.ts
================================================
import { POST } from '../app/api/transactions/route';
import { vi, describe, it, expect, beforeEach } from 'vitest';

vi.mock('../lib/prisma', () => {
  const create = vi.fn();
  const findUnique = vi.fn();
  const positionCreate = vi.fn();
  const positionUpdate = vi.fn();
  const oppFind = vi.fn();
  return {
    prisma: {
      portfolioTransaction: { create },
      portfolioPosition: { findUnique, create: positionCreate, update: positionUpdate },
      yieldOpportunity: { findUnique: oppFind }
    }
  };
});

const { prisma } = await import('../lib/prisma');

describe('POST /api/transactions', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('returns 422 on validation error', async () => {
    const res = await POST(new Request('http://test', { method: 'POST', body: JSON.stringify({}) }));
    expect(res.status).toBe(422);
  });

  it('creates transaction and position', async () => {
    (prisma.portfolioPosition.findUnique as any).mockResolvedValue(null);
    (prisma.yieldOpportunity.findUnique as any).mockResolvedValue({ tokenSymbol: 'ETH', apy: 1 });

    const body = {
      walletAddress: '0xabc',
      integrationId: '1',
      yieldOpportunityId: 'y1',
      direction: 'ENTER',
      amount: '1',
      txHash: '0x1',
      executedAt: new Date().toISOString()
    };
    const res = await POST(new Request('http://test', { method: 'POST', body: JSON.stringify(body) }));
    expect(res.status).toBe(201);
    expect(prisma.portfolioTransaction.create).toHaveBeenCalled();
    expect(prisma.portfolioPosition.create).toHaveBeenCalled();
  });
});



================================================
File: tests/portfolio-fetch.test.ts
================================================
import { describe, it, expect, beforeEach, vi } from 'vitest'
import { render, screen, waitFor } from '@testing-library/react'
import PortfolioClient from '../components/portfolio-client'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiProvider } from 'wagmi'
import { getConfig } from '../wagmiConfig'

vi.mock('wagmi', async () => {
  const actual: any = await vi.importActual('wagmi')
  return { ...actual, useAccount: () => ({ address: '0xabc', isConnected: true }) }
})

const positions = [
  {
    wallet_address: '0xabc',
    integration_id: '1',
    yield_opportunity_id: 'y1',
    amount: 1,
    usd_value: 1,
    entry_date: new Date().toISOString(),
    apy: 1,
    last_balance_sync: null,
    yieldOpportunity: { name: 'A', apy: 1, tvl: 1 }
  },
  {
    wallet_address: '0xabc',
    integration_id: '2',
    yield_opportunity_id: 'y2',
    amount: 1,
    usd_value: 1,
    entry_date: new Date().toISOString(),
    apy: 1,
    last_balance_sync: null,
    yieldOpportunity: { name: 'B', apy: 1, tvl: 1 }
  },
  {
    wallet_address: '0xabc',
    integration_id: '3',
    yield_opportunity_id: 'y3',
    amount: 1,
    usd_value: 1,
    entry_date: new Date().toISOString(),
    apy: 1,
    last_balance_sync: null,
    yieldOpportunity: { name: 'C', apy: 1, tvl: 1 }
  }
]

describe('Portfolio fetch', () => {
  beforeEach(() => {
    vi.stubGlobal('fetch', vi.fn().mockResolvedValue({ ok: true, json: () => Promise.resolve(positions) }))
  })

  it('renders three PositionCard components', async () => {
    const queryClient = new QueryClient()
    render(
      <WagmiProvider config={getConfig()}>
        <QueryClientProvider client={queryClient}>
          <PortfolioClient positions={[]} />
        </QueryClientProvider>
      </WagmiProvider>
    )

    await waitFor(() => {
      expect(screen.getAllByText('Exit').length).toBe(3)
    })
  })
})


