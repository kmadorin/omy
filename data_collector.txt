Directory structure:
‚îî‚îÄ‚îÄ data-collector/
    ‚îú‚îÄ‚îÄ api-client.ts
    ‚îú‚îÄ‚îÄ collector.ts
    ‚îú‚îÄ‚îÄ db-service.ts
    ‚îú‚îÄ‚îÄ index.ts
    ‚îú‚îÄ‚îÄ package.json
    ‚îú‚îÄ‚îÄ pnpm-lock.yaml
    ‚îú‚îÄ‚îÄ test-db.js
    ‚îú‚îÄ‚îÄ types.ts
    ‚îî‚îÄ‚îÄ prisma/
        ‚îú‚îÄ‚îÄ schema.prisma
        ‚îî‚îÄ‚îÄ migrations/
            ‚îú‚îÄ‚îÄ migration_lock.toml
            ‚îú‚îÄ‚îÄ 20250322160135_init/
            ‚îÇ   ‚îî‚îÄ‚îÄ migration.sql
            ‚îú‚îÄ‚îÄ 20250322160544_consistent_field_naming/
            ‚îÇ   ‚îî‚îÄ‚îÄ migration.sql
            ‚îî‚îÄ‚îÄ 20250709090533_add_portfolio_feature/
                ‚îî‚îÄ‚îÄ migration.sql

================================================
File: api-client.ts
================================================
import axios from 'axios';
import { StakeKitYieldResponse } from './types';

export class ApiClient {
  private baseUrl: string;
  private apiKey: string;

  constructor(baseUrl: string, apiKey: string) {
    this.baseUrl = baseUrl.replace(/\/+$/, '');
    this.apiKey = apiKey;
    console.log('ApiClient initialized with baseUrl:', this.baseUrl);
  }

  async fetchYields(page: number = 1, limit: number = 100): Promise<StakeKitYieldResponse> {
    const url = `${this.baseUrl}/v2/yields?page=${page}&limit=${limit}`;
    console.log('\n=== API Request Debug ===');
    console.log('üåê Requesting URL:', url);

    try {
      const response = await axios.get<StakeKitYieldResponse>(url, {
        headers: {
          'X-API-KEY': this.apiKey
        }
      });
      console.log('‚úÖ Response status:', response.status);
      return response.data;
    } catch (error: any) {
      console.log('\n‚ùå API Request Failed:');
      console.log('URL:', url);
      console.log('Status:', error.response?.status);
      console.log('Status Text:', error.response?.statusText);
      console.log('Error Data:', error.response?.data);
      console.log('======================\n');
      
      throw new Error(`Failed to fetch yields: ${error.message}`);
    }
  }
} 


================================================
File: collector.ts
================================================
import { ApiClient } from './api-client';
import { DatabaseService } from './db-service';
import winston from 'winston';

export class YieldCollector {
  private logger: winston.Logger;

  constructor(
    private apiClient: ApiClient,
    private dbService: DatabaseService,
    isTest = process.env.NODE_ENV === 'test'
  ) {
    this.logger = winston.createLogger({
      level: 'info',
      format: winston.format.json(),
      silent: isTest,
      transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'error.log', level: 'error' }),
        new winston.transports.File({ filename: 'combined.log' })
      ]
    });
  }

  async collect(): Promise<void> {
    try {
      this.logger.info('Starting yield collection');
      let page = 1;
      let hasMore = true;

      while (hasMore) {
        const response = await this.apiClient.fetchYields(page);
        
        const validatedData = response.data
          .filter(protocol => {
            const isValid = !!protocol;
            if (!isValid) this.logger.warn('Filtered out undefined protocol entry');
            return isValid;
          })
          .map(protocol => {
            if (!protocol.id) {
              this.logger.warn(`Missing ID in protocol: ${JSON.stringify(protocol)}`);
              return { ...protocol, id: 'unknown-id' };
            }
            return protocol;
          });

        this.logger.info(`Processing ${validatedData.length} protocols`);
        await this.dbService.upsertYields(validatedData);
        
        hasMore = response.hasNextPage;
        page += 1;
      }
      this.logger.info(`Successfully collected yields`);
    } catch (error: any) {
      this.logger.error('Error collecting yields:', error.message);
      throw error;
    }
  }
} 


================================================
File: db-service.ts
================================================
import { PrismaClient } from '@prisma/client';
import { YieldData } from './types';

export class DatabaseService {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  async upsertYields(yields: YieldData[]): Promise<void> {
    try {
      // Filter out invalid entries first
      const validYields = yields.filter(yieldData => {
        if (!yieldData) {
          console.error('Found undefined yield data entry');
          return false;
        }
        if (!yieldData.id || !yieldData.metadata || !yieldData.token) {
          console.error('Invalid yield data structure:', JSON.stringify(yieldData, null, 2));
          return false;
        }
        return true;
      });

      await Promise.all(
        validYields.map((yieldData) => {
          try {
            const mappedYield = {
              id: yieldData.id,
              name: yieldData.metadata?.name || 'Unknown',
              content: null,
              apy: yieldData.apy || 0,
              rewardType: yieldData.rewardType || 'unknown',
              type: yieldData.metadata?.type || 'unknown',
              network: yieldData.token?.network || 'unknown',
              tokenSymbol: yieldData.token?.symbol || 'unknown',
              tokenAddress: yieldData.token?.address,
              providerId: yieldData.metadata?.provider?.id || 'unknown',
              providerName: yieldData.metadata?.provider?.name || 'Unknown Provider',
              protocol: (yieldData.metadata?.provider?.name || 'unknown').toLowerCase(),
              asset: yieldData.token?.symbol || 'unknown',
              tvl: 0,
              isAvailable: !!yieldData.isAvailable,
              cooldownDays: yieldData.metadata?.cooldownPeriod?.days || null,
              warmupDays: yieldData.metadata?.warmupPeriod?.days || null,
              withdrawDays: yieldData.metadata?.withdrawPeriod?.days || null,
              canEnter: yieldData.status?.enter ?? true,
              canExit: yieldData.status?.exit ?? true,
              updatedAt: new Date(),
              createdAt: new Date(),
            };

            return this.prisma.yieldOpportunity.upsert({
              where: { id: yieldData.id },
              update: mappedYield,
              create: mappedYield,
            });
          } catch (err) {
            console.error('Error mapping yield data:', err);
            console.error('Problematic yield data:', JSON.stringify(yieldData, null, 2));
            return Promise.resolve(); // Skip this entry but continue with others
          }
        }).filter(Boolean) // Remove any undefined entries from failed mappings
      );
    } catch (error: any) {
      console.error('Failed yield data:', JSON.stringify(yields, null, 2));
      throw new Error(`Failed to upsert yields: ${error.message}`);
    }
  }

  async disconnect(): Promise<void> {
    await this.prisma.$disconnect();
  }
} 


================================================
File: index.ts
================================================
import * as dotenv from 'dotenv';
import { resolve } from 'path';
import cron from 'node-cron';
import { ApiClient } from './api-client';
import { DatabaseService } from './db-service';
import { YieldCollector } from './collector';
import { z } from 'zod';

// Load .env from project root
dotenv.config({ path: resolve(__dirname, '../.env') });

const envSchema = z.object({
  API_BASE_URL: z.string().url().default('https://api.stakek.it'),
  DATABASE_URL: z.string().url(),
  STAKEKIT_API_KEY: z.string().min(1)
});

// Validate environment variables
const env = envSchema.safeParse(process.env);
if (!env.success) {
  console.error('Environment validation failed:', env.error.format());
  process.exit(1);
}

const apiClient = new ApiClient(env.data.API_BASE_URL, env.data.STAKEKIT_API_KEY);
const dbService = new DatabaseService();
const collector = new YieldCollector(apiClient, dbService);

// Run every 10 minutes
cron.schedule('*/10 * * * *', async () => {
  try {
    await collector.collect();
  } catch (error) {
    console.error('Scheduled collection failed:', error);
  }
});

// Initial collection
collector.collect().catch(error => {
  console.error('Initial collection failed:', error);
  process.exit(1);
});

export class DataCollector {
  private apiClient: ApiClient;
  private dbService: DatabaseService;

  constructor(apiBaseUrl: string, apiKey: string) {
    this.apiClient = new ApiClient(apiBaseUrl, apiKey);
    this.dbService = new DatabaseService();
  }

  async collectData(): Promise<void> {
    try {
      let page = 1;
      let hasMore = true;

      while (hasMore) {
        const response = await this.apiClient.fetchYields(page);
        await this.dbService.upsertYields(response.data);
        
        hasMore = response.hasNextPage;
        page += 1;
      }
    } catch (error: any) {
      console.error('Error collecting data:', error.message);
      throw error;
    } finally {
      await this.dbService.disconnect();
    }
  }
}

// Start the collector if this file is run directly
if (require.main === module) {
  const DEFAULT_API_BASE_URL = process.env.API_BASE_URL || 'https://api.stakek.it';
  const API_KEY = process.env.STAKEKIT_API_KEY;
  
  if (!API_KEY) {
    console.error('STAKEKIT_API_KEY environment variable is required');
    process.exit(1);
  }
  
  const collectorInstance = new DataCollector(DEFAULT_API_BASE_URL, API_KEY);
  
  collectorInstance.collectData()
    .then(() => console.log('Data collection completed'))
    .catch((error) => {
      console.error('Data collection failed:', error);
      process.exit(1);
    });
} 


================================================
File: package.json
================================================
{
  "name": "data-collector",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "tsx index.ts",
    "dev": "tsx watch index.ts",
    "build": "tsc"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@prisma/client": "^5.22.0",
    "axios": "^1.8.4",
    "dotenv": "^16.4.7",
    "node-cron": "^3.x",
    "winston": "^3.x",
    "zod": "^3.x"
  },
  "devDependencies": {
    "@types/node": "^22.13.11",
    "@types/node-cron": "^3.0.11",
    "prisma": "^5.22.0",
    "tsx": "^4.7.1",
    "typescript": "^5.4.2"
  }
}



================================================
File: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@prisma/client':
        specifier: ^5.22.0
        version: 5.22.0(prisma@5.22.0)
      axios:
        specifier: ^1.8.4
        version: 1.8.4
      dotenv:
        specifier: ^16.4.7
        version: 16.4.7
      node-cron:
        specifier: ^3.x
        version: 3.0.3
      winston:
        specifier: ^3.x
        version: 3.17.0
      zod:
        specifier: ^3.x
        version: 3.24.2
    devDependencies:
      '@types/node':
        specifier: ^22.13.11
        version: 22.13.11
      '@types/node-cron':
        specifier: ^3.0.11
        version: 3.0.11
      prisma:
        specifier: ^5.22.0
        version: 5.22.0
      tsx:
        specifier: ^4.7.1
        version: 4.19.3
      typescript:
        specifier: ^5.4.2
        version: 5.8.2

packages:

  '@colors/colors@1.6.0':
    resolution: {integrity: sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==}
    engines: {node: '>=0.1.90'}

  '@dabh/diagnostics@2.0.3':
    resolution: {integrity: sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==}

  '@esbuild/aix-ppc64@0.25.1':
    resolution: {integrity: sha512-kfYGy8IdzTGy+z0vFGvExZtxkFlA4zAxgKEahG9KE1ScBjpQnFsNOX8KTU5ojNru5ed5CVoJYXFtoxaq5nFbjQ==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.25.1':
    resolution: {integrity: sha512-50tM0zCJW5kGqgG7fQ7IHvQOcAn9TKiVRuQ/lN0xR+T2lzEFvAi1ZcS8DiksFcEpf1t/GYOeOfCAgDHFpkiSmA==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.25.1':
    resolution: {integrity: sha512-dp+MshLYux6j/JjdqVLnMglQlFu+MuVeNrmT5nk6q07wNhCdSnB7QZj+7G8VMUGh1q+vj2Bq8kRsuyA00I/k+Q==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.25.1':
    resolution: {integrity: sha512-GCj6WfUtNldqUzYkN/ITtlhwQqGWu9S45vUXs7EIYf+7rCiiqH9bCloatO9VhxsL0Pji+PF4Lz2XXCES+Q8hDw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.25.1':
    resolution: {integrity: sha512-5hEZKPf+nQjYoSr/elb62U19/l1mZDdqidGfmFutVUjjUZrOazAtwK+Kr+3y0C/oeJfLlxo9fXb1w7L+P7E4FQ==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.25.1':
    resolution: {integrity: sha512-hxVnwL2Dqs3fM1IWq8Iezh0cX7ZGdVhbTfnOy5uURtao5OIVCEyj9xIzemDi7sRvKsuSdtCAhMKarxqtlyVyfA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.25.1':
    resolution: {integrity: sha512-1MrCZs0fZa2g8E+FUo2ipw6jw5qqQiH+tERoS5fAfKnRx6NXH31tXBKI3VpmLijLH6yriMZsxJtaXUyFt/8Y4A==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.25.1':
    resolution: {integrity: sha512-0IZWLiTyz7nm0xuIs0q1Y3QWJC52R8aSXxe40VUxm6BB1RNmkODtW6LHvWRrGiICulcX7ZvyH6h5fqdLu4gkww==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.25.1':
    resolution: {integrity: sha512-jaN3dHi0/DDPelk0nLcXRm1q7DNJpjXy7yWaWvbfkPvI+7XNSc/lDOnCLN7gzsyzgu6qSAmgSvP9oXAhP973uQ==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.25.1':
    resolution: {integrity: sha512-NdKOhS4u7JhDKw9G3cY6sWqFcnLITn6SqivVArbzIaf3cemShqfLGHYMx8Xlm/lBit3/5d7kXvriTUGa5YViuQ==}
    engines: {node: '>=18'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.25.1':
    resolution: {integrity: sha512-OJykPaF4v8JidKNGz8c/q1lBO44sQNUQtq1KktJXdBLn1hPod5rE/Hko5ugKKZd+D2+o1a9MFGUEIUwO2YfgkQ==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.25.1':
    resolution: {integrity: sha512-nGfornQj4dzcq5Vp835oM/o21UMlXzn79KobKlcs3Wz9smwiifknLy4xDCLUU0BWp7b/houtdrgUz7nOGnfIYg==}
    engines: {node: '>=18'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.25.1':
    resolution: {integrity: sha512-1osBbPEFYwIE5IVB/0g2X6i1qInZa1aIoj1TdL4AaAb55xIIgbg8Doq6a5BzYWgr+tEcDzYH67XVnTmUzL+nXg==}
    engines: {node: '>=18'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.25.1':
    resolution: {integrity: sha512-/6VBJOwUf3TdTvJZ82qF3tbLuWsscd7/1w+D9LH0W/SqUgM5/JJD0lrJ1fVIfZsqB6RFmLCe0Xz3fmZc3WtyVg==}
    engines: {node: '>=18'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.25.1':
    resolution: {integrity: sha512-nSut/Mx5gnilhcq2yIMLMe3Wl4FK5wx/o0QuuCLMtmJn+WeWYoEGDN1ipcN72g1WHsnIbxGXd4i/MF0gTcuAjQ==}
    engines: {node: '>=18'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.25.1':
    resolution: {integrity: sha512-cEECeLlJNfT8kZHqLarDBQso9a27o2Zd2AQ8USAEoGtejOrCYHNtKP8XQhMDJMtthdF4GBmjR2au3x1udADQQQ==}
    engines: {node: '>=18'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.25.1':
    resolution: {integrity: sha512-xbfUhu/gnvSEg+EGovRc+kjBAkrvtk38RlerAzQxvMzlB4fXpCFCeUAYzJvrnhFtdeyVCDANSjJvOvGYoeKzFA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-arm64@0.25.1':
    resolution: {integrity: sha512-O96poM2XGhLtpTh+s4+nP7YCCAfb4tJNRVZHfIE7dgmax+yMP2WgMd2OecBuaATHKTHsLWHQeuaxMRnCsH8+5g==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [netbsd]

  '@esbuild/netbsd-x64@0.25.1':
    resolution: {integrity: sha512-X53z6uXip6KFXBQ+Krbx25XHV/NCbzryM6ehOAeAil7X7oa4XIq+394PWGnwaSQ2WRA0KI6PUO6hTO5zeF5ijA==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-arm64@0.25.1':
    resolution: {integrity: sha512-Na9T3szbXezdzM/Kfs3GcRQNjHzM6GzFBeU1/6IV/npKP5ORtp9zbQjvkDJ47s6BCgaAZnnnu/cY1x342+MvZg==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [openbsd]

  '@esbuild/openbsd-x64@0.25.1':
    resolution: {integrity: sha512-T3H78X2h1tszfRSf+txbt5aOp/e7TAz3ptVKu9Oyir3IAOFPGV6O9c2naym5TOriy1l0nNf6a4X5UXRZSGX/dw==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.25.1':
    resolution: {integrity: sha512-2H3RUvcmULO7dIE5EWJH8eubZAI4xw54H1ilJnRNZdeo8dTADEZ21w6J22XBkXqGJbe0+wnNJtw3UXRoLJnFEg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.25.1':
    resolution: {integrity: sha512-GE7XvrdOzrb+yVKB9KsRMq+7a2U/K5Cf/8grVFRAGJmfADr/e/ODQ134RK2/eeHqYV5eQRFxb1hY7Nr15fv1NQ==}
    engines: {node: '>=18'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.25.1':
    resolution: {integrity: sha512-uOxSJCIcavSiT6UnBhBzE8wy3n0hOkJsBOzy7HDAuTDE++1DJMRRVCPGisULScHL+a/ZwdXPpXD3IyFKjA7K8A==}
    engines: {node: '>=18'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.25.1':
    resolution: {integrity: sha512-Y1EQdcfwMSeQN/ujR5VayLOJ1BHaK+ssyk0AEzPjC+t1lITgsnccPqFjb6V+LsTp/9Iov4ysfjxLaGJ9RPtkVg==}
    engines: {node: '>=18'}
    cpu: [x64]
    os: [win32]

  '@prisma/client@5.22.0':
    resolution: {integrity: sha512-M0SVXfyHnQREBKxCgyo7sffrKttwE6R8PMq330MIUF0pTwjUhLbW84pFDlf06B27XyCR++VtjugEnIHdr07SVA==}
    engines: {node: '>=16.13'}
    peerDependencies:
      prisma: '*'
    peerDependenciesMeta:
      prisma:
        optional: true

  '@prisma/debug@5.22.0':
    resolution: {integrity: sha512-AUt44v3YJeggO2ZU5BkXI7M4hu9BF2zzH2iF2V5pyXT/lRTyWiElZ7It+bRH1EshoMRxHgpYg4VB6rCM+mG5jQ==}

  '@prisma/engines-version@5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2':
    resolution: {integrity: sha512-2PTmxFR2yHW/eB3uqWtcgRcgAbG1rwG9ZriSvQw+nnb7c4uCr3RAcGMb6/zfE88SKlC1Nj2ziUvc96Z379mHgQ==}

  '@prisma/engines@5.22.0':
    resolution: {integrity: sha512-UNjfslWhAt06kVL3CjkuYpHAWSO6L4kDCVPegV6itt7nD1kSJavd3vhgAEhjglLJJKEdJ7oIqDJ+yHk6qO8gPA==}

  '@prisma/fetch-engine@5.22.0':
    resolution: {integrity: sha512-bkrD/Mc2fSvkQBV5EpoFcZ87AvOgDxbG99488a5cexp5Ccny+UM6MAe/UFkUC0wLYD9+9befNOqGiIJhhq+HbA==}

  '@prisma/get-platform@5.22.0':
    resolution: {integrity: sha512-pHhpQdr1UPFpt+zFfnPazhulaZYCUqeIcPpJViYoq9R+D/yw4fjE+CtnsnKzPYm0ddUbeXUzjGVGIRVgPDCk4Q==}

  '@types/node-cron@3.0.11':
    resolution: {integrity: sha512-0ikrnug3/IyneSHqCBeslAhlK2aBfYek1fGo4bP4QnZPmiqSGRK+Oy7ZMisLWkesffJvQ1cqAcBnJC+8+nxIAg==}

  '@types/node@22.13.11':
    resolution: {integrity: sha512-iEUCUJoU0i3VnrCmgoWCXttklWcvoCIx4jzcP22fioIVSdTmjgoEvmAO/QPw6TcS9k5FrNgn4w7q5lGOd1CT5g==}

  '@types/triple-beam@1.3.5':
    resolution: {integrity: sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw==}

  async@3.2.6:
    resolution: {integrity: sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  axios@1.8.4:
    resolution: {integrity: sha512-eBSYY4Y68NNlHbHBMdeDmKNtDgXWhQsJcGqzO3iLUM0GraQFSS9cVgPX5I9b3lbdFKyYoAEGAZF1DwhTaljNAw==}

  call-bind-apply-helpers@1.0.2:
    resolution: {integrity: sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==}
    engines: {node: '>= 0.4'}

  color-convert@1.9.3:
    resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}

  color-name@1.1.3:
    resolution: {integrity: sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  color-string@1.9.1:
    resolution: {integrity: sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==}

  color@3.2.1:
    resolution: {integrity: sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==}

  colorspace@1.1.4:
    resolution: {integrity: sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  dotenv@16.4.7:
    resolution: {integrity: sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==}
    engines: {node: '>=12'}

  dunder-proto@1.0.1:
    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}
    engines: {node: '>= 0.4'}

  enabled@2.0.0:
    resolution: {integrity: sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ==}

  es-define-property@1.0.1:
    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
    engines: {node: '>= 0.4'}

  es-errors@1.3.0:
    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}
    engines: {node: '>= 0.4'}

  es-object-atoms@1.1.1:
    resolution: {integrity: sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==}
    engines: {node: '>= 0.4'}

  es-set-tostringtag@2.1.0:
    resolution: {integrity: sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==}
    engines: {node: '>= 0.4'}

  esbuild@0.25.1:
    resolution: {integrity: sha512-BGO5LtrGC7vxnqucAe/rmvKdJllfGaYWdyABvyMoXQlfYMb2bbRuReWR5tEGE//4LcNJj9XrkovTqNYRFZHAMQ==}
    engines: {node: '>=18'}
    hasBin: true

  fecha@4.2.3:
    resolution: {integrity: sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw==}

  fn.name@1.1.0:
    resolution: {integrity: sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw==}

  follow-redirects@1.15.9:
    resolution: {integrity: sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  form-data@4.0.2:
    resolution: {integrity: sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w==}
    engines: {node: '>= 6'}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  get-intrinsic@1.3.0:
    resolution: {integrity: sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==}
    engines: {node: '>= 0.4'}

  get-proto@1.0.1:
    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}
    engines: {node: '>= 0.4'}

  get-tsconfig@4.10.0:
    resolution: {integrity: sha512-kGzZ3LWWQcGIAmg6iWvXn0ei6WDtV26wzHRMwDSzmAbcXrTEXxHy6IehI6/4eT6VRKyMP1eF1VqwrVUmE/LR7A==}

  gopd@1.2.0:
    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}
    engines: {node: '>= 0.4'}

  has-symbols@1.1.0:
    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
    engines: {node: '>= 0.4'}

  has-tostringtag@1.0.2:
    resolution: {integrity: sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==}
    engines: {node: '>= 0.4'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  is-arrayish@0.3.2:
    resolution: {integrity: sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==}

  is-stream@2.0.1:
    resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
    engines: {node: '>=8'}

  kuler@2.0.0:
    resolution: {integrity: sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A==}

  logform@2.7.0:
    resolution: {integrity: sha512-TFYA4jnP7PVbmlBIfhlSe+WKxs9dklXMTEGcBCIvLhE/Tn3H6Gk1norupVW7m5Cnd4bLcr08AytbyV/xj7f/kQ==}
    engines: {node: '>= 12.0.0'}

  math-intrinsics@1.1.0:
    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}
    engines: {node: '>= 0.4'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  node-cron@3.0.3:
    resolution: {integrity: sha512-dOal67//nohNgYWb+nWmg5dkFdIwDm8EpeGYMekPMrngV3637lqnX0lbUcCtgibHTz6SEz7DAIjKvKDFYCnO1A==}
    engines: {node: '>=6.0.0'}

  one-time@1.0.0:
    resolution: {integrity: sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==}

  prisma@5.22.0:
    resolution: {integrity: sha512-vtpjW3XuYCSnMsNVBjLMNkTj6OZbudcPPTPYHqX0CJfpcdWciI1dM8uHETwmDxxiqEwCIE6WvXucWUetJgfu/A==}
    engines: {node: '>=16.13'}
    hasBin: true

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  readable-stream@3.6.2:
    resolution: {integrity: sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==}
    engines: {node: '>= 6'}

  resolve-pkg-maps@1.0.0:
    resolution: {integrity: sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==}

  safe-buffer@5.2.1:
    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}

  safe-stable-stringify@2.5.0:
    resolution: {integrity: sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==}
    engines: {node: '>=10'}

  simple-swizzle@0.2.2:
    resolution: {integrity: sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==}

  stack-trace@0.0.10:
    resolution: {integrity: sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==}

  string_decoder@1.3.0:
    resolution: {integrity: sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==}

  text-hex@1.0.0:
    resolution: {integrity: sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg==}

  triple-beam@1.4.1:
    resolution: {integrity: sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==}
    engines: {node: '>= 14.0.0'}

  tsx@4.19.3:
    resolution: {integrity: sha512-4H8vUNGNjQ4V2EOoGw005+c+dGuPSnhpPBPHBtsZdGZBk/iJb4kguGlPWaZTZ3q5nMtFOEsY0nRDlh9PJyd6SQ==}
    engines: {node: '>=18.0.0'}
    hasBin: true

  typescript@5.8.2:
    resolution: {integrity: sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  undici-types@6.20.0:
    resolution: {integrity: sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg==}

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  uuid@8.3.2:
    resolution: {integrity: sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==}
    hasBin: true

  winston-transport@4.9.0:
    resolution: {integrity: sha512-8drMJ4rkgaPo1Me4zD/3WLfI/zPdA9o2IipKODunnGDcuqbHwjsbB79ylv04LCGGzU0xQ6vTznOMpQGaLhhm6A==}
    engines: {node: '>= 12.0.0'}

  winston@3.17.0:
    resolution: {integrity: sha512-DLiFIXYC5fMPxaRg832S6F5mJYvePtmO5G9v9IgUFPhXm9/GkXarH/TUrBAVzhTCzAj9anE/+GjrgXp/54nOgw==}
    engines: {node: '>= 12.0.0'}

  zod@3.24.2:
    resolution: {integrity: sha512-lY7CDW43ECgW9u1TcT3IoXHflywfVqDYze4waEz812jR/bZ8FHDsl7pFQoSZTz5N+2NqRXs8GBwnAwo3ZNxqhQ==}

snapshots:

  '@colors/colors@1.6.0': {}

  '@dabh/diagnostics@2.0.3':
    dependencies:
      colorspace: 1.1.4
      enabled: 2.0.0
      kuler: 2.0.0

  '@esbuild/aix-ppc64@0.25.1':
    optional: true

  '@esbuild/android-arm64@0.25.1':
    optional: true

  '@esbuild/android-arm@0.25.1':
    optional: true

  '@esbuild/android-x64@0.25.1':
    optional: true

  '@esbuild/darwin-arm64@0.25.1':
    optional: true

  '@esbuild/darwin-x64@0.25.1':
    optional: true

  '@esbuild/freebsd-arm64@0.25.1':
    optional: true

  '@esbuild/freebsd-x64@0.25.1':
    optional: true

  '@esbuild/linux-arm64@0.25.1':
    optional: true

  '@esbuild/linux-arm@0.25.1':
    optional: true

  '@esbuild/linux-ia32@0.25.1':
    optional: true

  '@esbuild/linux-loong64@0.25.1':
    optional: true

  '@esbuild/linux-mips64el@0.25.1':
    optional: true

  '@esbuild/linux-ppc64@0.25.1':
    optional: true

  '@esbuild/linux-riscv64@0.25.1':
    optional: true

  '@esbuild/linux-s390x@0.25.1':
    optional: true

  '@esbuild/linux-x64@0.25.1':
    optional: true

  '@esbuild/netbsd-arm64@0.25.1':
    optional: true

  '@esbuild/netbsd-x64@0.25.1':
    optional: true

  '@esbuild/openbsd-arm64@0.25.1':
    optional: true

  '@esbuild/openbsd-x64@0.25.1':
    optional: true

  '@esbuild/sunos-x64@0.25.1':
    optional: true

  '@esbuild/win32-arm64@0.25.1':
    optional: true

  '@esbuild/win32-ia32@0.25.1':
    optional: true

  '@esbuild/win32-x64@0.25.1':
    optional: true

  '@prisma/client@5.22.0(prisma@5.22.0)':
    optionalDependencies:
      prisma: 5.22.0

  '@prisma/debug@5.22.0': {}

  '@prisma/engines-version@5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2': {}

  '@prisma/engines@5.22.0':
    dependencies:
      '@prisma/debug': 5.22.0
      '@prisma/engines-version': 5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2
      '@prisma/fetch-engine': 5.22.0
      '@prisma/get-platform': 5.22.0

  '@prisma/fetch-engine@5.22.0':
    dependencies:
      '@prisma/debug': 5.22.0
      '@prisma/engines-version': 5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2
      '@prisma/get-platform': 5.22.0

  '@prisma/get-platform@5.22.0':
    dependencies:
      '@prisma/debug': 5.22.0

  '@types/node-cron@3.0.11': {}

  '@types/node@22.13.11':
    dependencies:
      undici-types: 6.20.0

  '@types/triple-beam@1.3.5': {}

  async@3.2.6: {}

  asynckit@0.4.0: {}

  axios@1.8.4:
    dependencies:
      follow-redirects: 1.15.9
      form-data: 4.0.2
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  call-bind-apply-helpers@1.0.2:
    dependencies:
      es-errors: 1.3.0
      function-bind: 1.1.2

  color-convert@1.9.3:
    dependencies:
      color-name: 1.1.3

  color-name@1.1.3: {}

  color-name@1.1.4: {}

  color-string@1.9.1:
    dependencies:
      color-name: 1.1.4
      simple-swizzle: 0.2.2

  color@3.2.1:
    dependencies:
      color-convert: 1.9.3
      color-string: 1.9.1

  colorspace@1.1.4:
    dependencies:
      color: 3.2.1
      text-hex: 1.0.0

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  delayed-stream@1.0.0: {}

  dotenv@16.4.7: {}

  dunder-proto@1.0.1:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-errors: 1.3.0
      gopd: 1.2.0

  enabled@2.0.0: {}

  es-define-property@1.0.1: {}

  es-errors@1.3.0: {}

  es-object-atoms@1.1.1:
    dependencies:
      es-errors: 1.3.0

  es-set-tostringtag@2.1.0:
    dependencies:
      es-errors: 1.3.0
      get-intrinsic: 1.3.0
      has-tostringtag: 1.0.2
      hasown: 2.0.2

  esbuild@0.25.1:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.25.1
      '@esbuild/android-arm': 0.25.1
      '@esbuild/android-arm64': 0.25.1
      '@esbuild/android-x64': 0.25.1
      '@esbuild/darwin-arm64': 0.25.1
      '@esbuild/darwin-x64': 0.25.1
      '@esbuild/freebsd-arm64': 0.25.1
      '@esbuild/freebsd-x64': 0.25.1
      '@esbuild/linux-arm': 0.25.1
      '@esbuild/linux-arm64': 0.25.1
      '@esbuild/linux-ia32': 0.25.1
      '@esbuild/linux-loong64': 0.25.1
      '@esbuild/linux-mips64el': 0.25.1
      '@esbuild/linux-ppc64': 0.25.1
      '@esbuild/linux-riscv64': 0.25.1
      '@esbuild/linux-s390x': 0.25.1
      '@esbuild/linux-x64': 0.25.1
      '@esbuild/netbsd-arm64': 0.25.1
      '@esbuild/netbsd-x64': 0.25.1
      '@esbuild/openbsd-arm64': 0.25.1
      '@esbuild/openbsd-x64': 0.25.1
      '@esbuild/sunos-x64': 0.25.1
      '@esbuild/win32-arm64': 0.25.1
      '@esbuild/win32-ia32': 0.25.1
      '@esbuild/win32-x64': 0.25.1

  fecha@4.2.3: {}

  fn.name@1.1.0: {}

  follow-redirects@1.15.9: {}

  form-data@4.0.2:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      es-set-tostringtag: 2.1.0
      mime-types: 2.1.35

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  get-intrinsic@1.3.0:
    dependencies:
      call-bind-apply-helpers: 1.0.2
      es-define-property: 1.0.1
      es-errors: 1.3.0
      es-object-atoms: 1.1.1
      function-bind: 1.1.2
      get-proto: 1.0.1
      gopd: 1.2.0
      has-symbols: 1.1.0
      hasown: 2.0.2
      math-intrinsics: 1.1.0

  get-proto@1.0.1:
    dependencies:
      dunder-proto: 1.0.1
      es-object-atoms: 1.1.1

  get-tsconfig@4.10.0:
    dependencies:
      resolve-pkg-maps: 1.0.0

  gopd@1.2.0: {}

  has-symbols@1.1.0: {}

  has-tostringtag@1.0.2:
    dependencies:
      has-symbols: 1.1.0

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  inherits@2.0.4: {}

  is-arrayish@0.3.2: {}

  is-stream@2.0.1: {}

  kuler@2.0.0: {}

  logform@2.7.0:
    dependencies:
      '@colors/colors': 1.6.0
      '@types/triple-beam': 1.3.5
      fecha: 4.2.3
      ms: 2.1.3
      safe-stable-stringify: 2.5.0
      triple-beam: 1.4.1

  math-intrinsics@1.1.0: {}

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  ms@2.1.3: {}

  node-cron@3.0.3:
    dependencies:
      uuid: 8.3.2

  one-time@1.0.0:
    dependencies:
      fn.name: 1.1.0

  prisma@5.22.0:
    dependencies:
      '@prisma/engines': 5.22.0
    optionalDependencies:
      fsevents: 2.3.3

  proxy-from-env@1.1.0: {}

  readable-stream@3.6.2:
    dependencies:
      inherits: 2.0.4
      string_decoder: 1.3.0
      util-deprecate: 1.0.2

  resolve-pkg-maps@1.0.0: {}

  safe-buffer@5.2.1: {}

  safe-stable-stringify@2.5.0: {}

  simple-swizzle@0.2.2:
    dependencies:
      is-arrayish: 0.3.2

  stack-trace@0.0.10: {}

  string_decoder@1.3.0:
    dependencies:
      safe-buffer: 5.2.1

  text-hex@1.0.0: {}

  triple-beam@1.4.1: {}

  tsx@4.19.3:
    dependencies:
      esbuild: 0.25.1
      get-tsconfig: 4.10.0
    optionalDependencies:
      fsevents: 2.3.3

  typescript@5.8.2: {}

  undici-types@6.20.0: {}

  util-deprecate@1.0.2: {}

  uuid@8.3.2: {}

  winston-transport@4.9.0:
    dependencies:
      logform: 2.7.0
      readable-stream: 3.6.2
      triple-beam: 1.4.1

  winston@3.17.0:
    dependencies:
      '@colors/colors': 1.6.0
      '@dabh/diagnostics': 2.0.3
      async: 3.2.6
      is-stream: 2.0.1
      logform: 2.7.0
      one-time: 1.0.0
      readable-stream: 3.6.2
      safe-stable-stringify: 2.5.0
      stack-trace: 0.0.10
      triple-beam: 1.4.1
      winston-transport: 4.9.0

  zod@3.24.2: {}



================================================
File: test-db.js
================================================
require('dotenv').config({ path: '../.env' });
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  try {
    // Find all yield opportunities with APY > 5%
    const opportunities = await prisma.yieldOpportunity.findMany({
      where: {
        apy: {
          gt: 5.0
        }
      },
      select: {
        name: true,
        apy: true,
        protocol: true,
        tokenSymbol: true,
        tvl: true
      }
    });

    console.log('Found opportunities:', opportunities);
  } catch (error) {
    console.error('Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main(); 


================================================
File: types.ts
================================================
export interface YieldOpportunity {
  id: string;
  name: string;
  content?: string;
  apy: number;
  rewardType: string;
  type: string;
  network: string;
  tokenSymbol: string;
  tokenAddress?: string;
  providerId: string;
  providerName: string;
  protocol: string;
  asset: string;
  tvl: number;
  isAvailable: boolean;
  cooldownDays?: number;
  warmupDays?: number;
  withdrawDays?: number;
  canEnter: boolean;
  canExit: boolean;
  updatedAt: Date;
  createdAt: Date;
}

export interface StakeKitYieldResponse {
  data: YieldData[];
  hasNextPage: boolean;
  limit: number;
  page: number;
}

export interface YieldData {
  id: string;
  apy: number;
  rewardType: string;
  token: {
    network: string;
    name: string;
    symbol: string;
    address?: string;
    decimals: number;
    coinGeckoId: string;
    logoURI: string;
  };
  metadata: {
    name: string;
    type: string;
    cooldownPeriod?: { days: number };
    warmupPeriod?: { days: number };
    withdrawPeriod?: { days: number };
    provider: {
      id: string;
      name: string;
      description: string;
      externalLink: string;
      logoURI: string;
    };
  };
  status: {
    enter: boolean;
    exit: boolean;
  };
  isAvailable: boolean;
}

export interface PortfolioPosition {
  id: string;
  yieldOpportunityId: string;
  amount: number;
  walletAddress: string;
  integrationId: string;
  entryDate: Date;
  lastModified: Date;
  lastBalanceSync?: Date;
  currentApy: number;
  isActive: boolean;
  exitTxHash?: string;
  entryTxHash?: string;
  tokenAddress?: string;
  tokenSymbol: string;
}

export enum PortfolioDirection {
  ENTER = 'ENTER',
  EXIT = 'EXIT',
  CORRECTION = 'CORRECTION',
}

export interface PortfolioTransaction {
  id: string;
  walletAddress: string;
  integrationId: string;
  yieldOpportunityId: string;
  direction: PortfolioDirection;
  amount: string;
  usdValue?: string;
  txHash: string;
  executedAt: Date;
}

export interface PortfolioRebalance {
  id: string;
  fromPositionId: string;
  toPositionId: string;
  amount: number;
  executedAt: Date;
  fromApy: number;
  toApy: number;
  gasCost: number;
  annualIncomeChange: number;} 


================================================
File: prisma/schema.prisma
================================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model YieldOpportunity {
  id                   String                 @id
  name                 String
  content              String?
  apy                  Float
  rewardType           String                 @map("reward_type")
  type                 String                 @map("metadata_type")
  network              String                 @map("token_network")
  tokenSymbol          String                 @map("token_symbol")
  tokenAddress         String?                @map("token_address")
  providerId           String                 @map("provider_id")
  providerName         String                 @map("provider_name")
  protocol             String                 @default("")
  asset                String                 @default("")
  tvl                  Float                  @default(0)
  isAvailable          Boolean                @default(true) @map("is_available")
  cooldownDays         Int?                   @map("cooldown_days")
  warmupDays           Int?                   @map("warmup_days")
  withdrawDays         Int?                   @map("withdraw_days")
  canEnter             Boolean                @default(true) @map("can_enter")
  canExit              Boolean                @default(true) @map("can_exit")
  updatedAt            DateTime               @map("updated_at")
  createdAt            DateTime               @default(now()) @map("created_at")
  PortfolioTransaction PortfolioTransaction[]
}

enum PortfolioDirection {
  ENTER
  EXIT
  CORRECTION
}

model PortfolioPosition {
  id                 String    @id @map("id")
  yieldOpportunityId String    @map("yield_opportunity_id")
  amount             Float     @map("amount")
  walletAddress      String    @map("wallet_address")
  integrationId      String    @map("integration_id")
  entryDate          DateTime  @map("entry_date")
  lastModified       DateTime  @updatedAt @map("last_modified")
  lastBalanceSync    DateTime? @map("last_balance_sync")
  currentApy         Float     @map("current_apy")
  isActive           Boolean   @default(true) @map("is_active")
  exitTxHash         String?   @map("exit_tx_hash")
  entryTxHash        String?   @map("entry_tx_hash")
  tokenAddress       String?   @map("token_address")
  tokenSymbol        String    @map("token_symbol")

  @@unique([walletAddress, integrationId])
  @@map("portfolio_position")
}

model PortfolioRebalance {
  id                 String   @id
  fromPositionId     String   @map("from_position_id")
  toPositionId       String   @map("to_position_id")
  amount             Float
  executedAt         DateTime @map("executed_at")
  fromApy            Float    @map("from_apy")
  toApy              Float    @map("to_apy")
  gasCost            Float    @map("gas_cost")
  annualIncomeChange Float    @map("annual_income_change")

  @@map("portfolio_rebalance")
}

model PortfolioTransaction {
  id                 String             @id @default(uuid())
  walletAddress      String             @map("wallet_address")
  integrationId      String             @map("integration_id")
  yieldOpportunity   YieldOpportunity   @relation(fields: [yieldOpportunityId], references: [id])
  yieldOpportunityId String             @map("yield_opportunity_id")
  direction          PortfolioDirection
  amount             Decimal
  usdValue           Decimal?           @map("usd_value")
  txHash             String             @unique @map("tx_hash")
  executedAt         DateTime           @map("executed_at")

  @@index([walletAddress])
  @@map("portfolio_transaction")
}



================================================
File: prisma/migrations/migration_lock.toml
================================================
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"


================================================
File: prisma/migrations/20250322160135_init/migration.sql
================================================
-- CreateTable
CREATE TABLE "YieldOpportunity" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "content" TEXT,
    "apy" DOUBLE PRECISION NOT NULL,
    "rewardType" TEXT NOT NULL,
    "metadata_type" TEXT NOT NULL,
    "token_network" TEXT NOT NULL,
    "token_symbol" TEXT NOT NULL,
    "token_address" TEXT,
    "provider_id" TEXT NOT NULL,
    "provider_name" TEXT NOT NULL,
    "protocol" TEXT NOT NULL DEFAULT '',
    "asset" TEXT NOT NULL DEFAULT '',
    "tvl" DOUBLE PRECISION NOT NULL DEFAULT 0,
    "isAvailable" BOOLEAN NOT NULL DEFAULT true,
    "cooldown_days" INTEGER,
    "warmup_days" INTEGER,
    "withdraw_days" INTEGER,
    "canEnter" BOOLEAN NOT NULL DEFAULT true,
    "canExit" BOOLEAN NOT NULL DEFAULT true,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "YieldOpportunity_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "portfolio_position" (
    "id" TEXT NOT NULL,
    "yield_opportunity_id" TEXT NOT NULL,
    "amount" DOUBLE PRECISION NOT NULL,
    "category" TEXT NOT NULL,
    "entry_date" TIMESTAMP(3) NOT NULL,
    "last_modified" TIMESTAMP(3) NOT NULL,
    "current_apy" DOUBLE PRECISION NOT NULL,
    "is_active" BOOLEAN NOT NULL DEFAULT true,
    "exit_tx_hash" TEXT,
    "entry_tx_hash" TEXT,
    "token_address" TEXT,
    "token_symbol" TEXT NOT NULL,

    CONSTRAINT "portfolio_position_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "portfolio_rebalance" (
    "id" TEXT NOT NULL,
    "from_position_id" TEXT NOT NULL,
    "to_position_id" TEXT NOT NULL,
    "amount" DOUBLE PRECISION NOT NULL,
    "executed_at" TIMESTAMP(3) NOT NULL,
    "from_apy" DOUBLE PRECISION NOT NULL,
    "to_apy" DOUBLE PRECISION NOT NULL,
    "gas_cost" DOUBLE PRECISION NOT NULL,
    "annual_income_change" DOUBLE PRECISION NOT NULL,

    CONSTRAINT "portfolio_rebalance_pkey" PRIMARY KEY ("id")
);



================================================
File: prisma/migrations/20250322160544_consistent_field_naming/migration.sql
================================================
/*
  Warnings:

  - You are about to drop the column `canEnter` on the `YieldOpportunity` table. All the data in the column will be lost.
  - You are about to drop the column `canExit` on the `YieldOpportunity` table. All the data in the column will be lost.
  - You are about to drop the column `createdAt` on the `YieldOpportunity` table. All the data in the column will be lost.
  - You are about to drop the column `isAvailable` on the `YieldOpportunity` table. All the data in the column will be lost.
  - You are about to drop the column `rewardType` on the `YieldOpportunity` table. All the data in the column will be lost.
  - You are about to drop the column `updatedAt` on the `YieldOpportunity` table. All the data in the column will be lost.
  - Added the required column `reward_type` to the `YieldOpportunity` table without a default value. This is not possible if the table is not empty.
  - Added the required column `updated_at` to the `YieldOpportunity` table without a default value. This is not possible if the table is not empty.

*/
-- AlterTable
ALTER TABLE "YieldOpportunity" DROP COLUMN "canEnter",
DROP COLUMN "canExit",
DROP COLUMN "createdAt",
DROP COLUMN "isAvailable",
DROP COLUMN "rewardType",
DROP COLUMN "updatedAt",
ADD COLUMN     "can_enter" BOOLEAN NOT NULL DEFAULT true,
ADD COLUMN     "can_exit" BOOLEAN NOT NULL DEFAULT true,
ADD COLUMN     "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN     "is_available" BOOLEAN NOT NULL DEFAULT true,
ADD COLUMN     "reward_type" TEXT NOT NULL,
ADD COLUMN     "updated_at" TIMESTAMP(3) NOT NULL;



================================================
File: prisma/migrations/20250709090533_add_portfolio_feature/migration.sql
================================================
-- CreateEnum
CREATE TYPE "PortfolioDirection" AS ENUM ('ENTER', 'EXIT', 'CORRECTION');

-- AlterTable
ALTER TABLE "portfolio_position"
    DROP COLUMN "category",
    ADD COLUMN     "wallet_address" TEXT NOT NULL,
    ADD COLUMN     "integration_id" TEXT NOT NULL,
    ADD COLUMN     "last_balance_sync" TIMESTAMP(3);

-- CreateIndex
CREATE UNIQUE INDEX "portfolio_position_wallet_address_integration_id_key" ON "portfolio_position" ("wallet_address", "integration_id");

-- CreateTable
CREATE TABLE "portfolio_transaction" (
    "id" TEXT NOT NULL DEFAULT uuid_generate_v4(),
    "wallet_address" TEXT NOT NULL,
    "integration_id" TEXT NOT NULL,
    "yield_opportunity_id" TEXT NOT NULL,
    "direction" "PortfolioDirection" NOT NULL,
    "amount" DECIMAL(65,30) NOT NULL,
    "usd_value" DECIMAL(65,30),
    "tx_hash" TEXT NOT NULL,
    "executed_at" TIMESTAMP(3) NOT NULL,
    CONSTRAINT "portfolio_transaction_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "portfolio_transaction_tx_hash_key" UNIQUE ("tx_hash")
);

-- CreateIndex
CREATE INDEX "portfolio_transaction_wallet_address_idx" ON "portfolio_transaction" ("wallet_address");

-- AddForeignKey
ALTER TABLE "portfolio_transaction" ADD CONSTRAINT "portfolio_transaction_yield_opportunity_id_fkey" FOREIGN KEY ("yield_opportunity_id") REFERENCES "YieldOpportunity"("id") ON DELETE RESTRICT ON UPDATE CASCADE;


